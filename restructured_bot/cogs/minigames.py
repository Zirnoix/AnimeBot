"""
Mini‚Äëgames commands.

This cog regroupe plusieurs petits jeux pour divertir les utilisateurs :
* **Higher/Lower** : devinez quel anime est le plus populaire.
* **Guess Year** : devinez l‚Äôann√©e de diffusion d‚Äôun anime.
* **Higher Mean** : devinez quelle s√©rie a la meilleure note moyenne.
* **Guess Episodes** : devinez le nombre d‚Äô√©pisodes d‚Äôune s√©rie.
* **Guess Genre** : trouvez un des genres principaux d‚Äôun anime.

Les jeux attribuent de l‚ÄôXP et enregistrent un mini‚Äëscore afin de
r√©compenser les joueurs les plus actifs.
"""

from __future__ import annotations

import random
from typing import Optional

import discord
from discord.ext import commands

from restructured_bot.modules import core


class MiniGames(commands.Cog):
    def __init__(self, bot: commands.Bot) -> None:
        self.bot = bot

    @commands.command(name="higherlower")
    async def higher_lower(self, ctx: commands.Context) -> None:
        """Devine quel anime est le plus populaire sur AniList.

        Le bot s√©lectionne deux animes au hasard parmi les plus populaires.
        R√©ponds `1` ou `2` pour indiquer lequel tu penses √™tre le plus
        populaire. Une bonne r√©ponse te rapporte 5 XP.
        """
        await ctx.send("üé≤ Pr√©paration du mini‚Äëjeu‚Ä¶")
        # Fetch a batch of popular anime
        page = random.randint(1, 10)
        query = '''
        query ($page: Int) {
          Page(page: $page, perPage: 50) {
            media(type: ANIME, isAdult: false, sort: POPULARITY_DESC) {
              title { romaji }
              popularity
              coverImage { medium }
            }
          }
        }
        '''
        data = core.query_anilist(query, {"page": page})
        if not data or not data.get("data"):
            await ctx.send("‚ùå Impossible de r√©cup√©rer des donn√©es pour le mini‚Äëjeu.")
            return
        media_list = data["data"]["Page"]["media"]
        if len(media_list) < 2:
            await ctx.send("‚ùå Pas assez de donn√©es pour jouer.")
            return
        choice1, choice2 = random.sample(media_list, 2)
        # Compose embed presenting the two options
        embed = discord.Embed(
            title="‚¨ÜÔ∏è‚¨áÔ∏è Mini‚Äëjeu : Quel anime est le plus populaire ?",
            description=(
                "R√©ponds `1` ou `2` selon ton intuition.\n"
                "1Ô∏è‚É£ {t1}\n"
                "2Ô∏è‚É£ {t2}"
            ).format(t1=choice1["title"]["romaji"], t2=choice2["title"]["romaji"]),
            color=discord.Color.orange(),
        )
        # Optionally display covers
        if choice1.get("coverImage") and choice2.get("coverImage"):
            embed.set_thumbnail(url=choice1["coverImage"]["medium"])
            # We cannot display two thumbnails; we rely on text descriptions
        await ctx.send(embed=embed)
        def check(m: discord.Message) -> bool:
            return m.author == ctx.author and m.channel == ctx.channel and m.content.strip() in {"1", "2"}
        try:
            msg = await self.bot.wait_for("message", timeout=15.0, check=check)
        except Exception:
            await ctx.send("‚è∞ Temps √©coul√© ! Jeu annul√©.")
            return
        answer = msg.content.strip()
        pop1 = choice1.get("popularity", 0)
        pop2 = choice2.get("popularity", 0)
        correct = "1" if pop1 >= pop2 else "2"
        if answer == correct:
            await ctx.send(f"‚úÖ Bravo! **{choice1['title']['romaji']}** a une popularit√© de {pop1} et **{choice2['title']['romaji']}** de {pop2}. Tu gagnes 5 XP !")
            core.add_xp(ctx.author.id, 5)
            # Record mini-game score
            core.add_mini_score(ctx.author.id, "higherlower", 1)
        else:
            await ctx.send(f"‚ùå Mauvais choix. **{choice1['title']['romaji']}** : {pop1}, **{choice2['title']['romaji']}** : {pop2}.")

    @commands.command(name="guessyear")
    async def guess_year(self, ctx: commands.Context) -> None:
        """Devine l‚Äôann√©e de diffusion d‚Äôun anime au hasard.

        Le bot choisit un anime populaire et te demande son ann√©e de sortie. Tu as
        15 secondes pour r√©pondre. Une r√©ponse exacte ou avec une marge de ¬±1 an
        rapporte 8 XP, sinon la bonne ann√©e est affich√©e.
        """
        await ctx.send("üóìÔ∏è Chargement d‚Äôun anime‚Ä¶")
        # Fetch a random anime
        page = random.randint(1, 500)
        query = f'''
        query {{
          Page(perPage: 1, page: {page}) {{
            media(type: ANIME, isAdult: false, sort: POPULARITY_DESC) {{
              title {{ romaji }}
              startDate {{ year }}
              coverImage {{ medium }}
            }}
          }}
        }}
        '''
        data = core.query_anilist(query)
        try:
            anime = data["data"]["Page"]["media"][0]
        except Exception:
            await ctx.send("‚ùå Impossible de r√©cup√©rer un anime.")
            return
        title = anime["title"]["romaji"]
        year = anime.get("startDate", {}).get("year")
        if not year:
            await ctx.send("‚ùå L‚Äôann√©e de cet anime est indisponible.")
            return
        embed = discord.Embed(
            title="üìÖ Mini‚Äëjeu : Devine l‚Äôann√©e !",
            description=(
                f"En quelle ann√©e **{title}** a‚Äët‚Äëil commenc√© √† √™tre diffus√© ?\n"
                "R√©ponds par une ann√©e (ex : `2015`)."
            ),
            color=discord.Color.purple(),
        )
        img_url = anime.get("coverImage", {}).get("medium")
        if img_url:
            embed.set_thumbnail(url=img_url)
        await ctx.send(embed=embed)
        def check(m: discord.Message) -> bool:
            return m.author == ctx.author and m.channel == ctx.channel
        try:
            msg = await self.bot.wait_for("message", timeout=15.0, check=check)
        except Exception:
            await ctx.send("‚è∞ Temps √©coul√© ! Le mini‚Äëjeu est annul√©.")
            return
        try:
            guessed_year = int(msg.content.strip())
        except ValueError:
            await ctx.send(f"‚ùå Format invalide. L‚Äôann√©e √©tait **{year}**.")
            return
        # Determine if guess is correct within ¬±1
        if abs(guessed_year - year) <= 1:
            await ctx.send(f"‚úÖ Bravo ! L‚Äôann√©e √©tait bien **{year}** (tu as r√©pondu {guessed_year}). Tu gagnes 8 XP !")
            core.add_xp(ctx.author.id, 8)
            core.add_mini_score(ctx.author.id, "guessyear", 1)
        else:
            await ctx.send(f"‚ùå Rat√©. L‚Äôann√©e √©tait **{year}** (tu as r√©pondu {guessed_year}).")

    @commands.command(name="highermean")
    async def higher_mean(self, ctx: commands.Context) -> None:
        """Compare les notes moyennes de deux animes.

        Deux animes sont s√©lectionn√©s et tu dois deviner lequel a la
        meilleure note moyenne sur AniList. Une bonne r√©ponse rapporte 5 XP.
        """
        await ctx.send("üìä Pr√©paration du mini‚Äëjeu‚Ä¶")
        page = random.randint(1, 10)
        query = f'''
        query {{
          Page(perPage: 50, page: {page}) {{
            media(type: ANIME, isAdult: false, sort: SCORE_DESC) {{
              title {{ romaji }}
              meanScore
              coverImage {{ medium }}
            }}
          }}
        }}
        '''
        data = core.query_anilist(query)
        try:
            anime_list = data["data"]["Page"]["media"]
        except Exception:
            await ctx.send("‚ùå Impossible de r√©cup√©rer des donn√©es.")
            return
        if len(anime_list) < 2:
            await ctx.send("‚ùå Pas assez d‚Äôanimes pour jouer.")
            return
        a1, a2 = random.sample(anime_list, 2)
        t1, s1 = a1["title"]["romaji"], a1.get("meanScore", 0)
        t2, s2 = a2["title"]["romaji"], a2.get("meanScore", 0)
        embed = discord.Embed(
            title="üéñÔ∏è Mini‚Äëjeu : Quelle note est la plus haute ?",
            description=(
                "R√©ponds `1` ou `2` selon toi.\n"
                f"1Ô∏è‚É£ {t1}\n"
                f"2Ô∏è‚É£ {t2}"
            ),
            color=discord.Color.green(),
        )
        await ctx.send(embed=embed)
        def check(m: discord.Message) -> bool:
            return m.author == ctx.author and m.channel == ctx.channel and m.content.strip() in {"1", "2"}
        try:
            msg = await self.bot.wait_for("message", timeout=15.0, check=check)
        except Exception:
            await ctx.send("‚è∞ Temps √©coul√© ! Jeu annul√©.")
            return
        answer = msg.content.strip()
        correct = "1" if s1 >= s2 else "2"
        if answer == correct:
            await ctx.send(f"‚úÖ Bien jou√© ! **{t1}** : {s1}/100 ‚Äì **{t2}** : {s2}/100. Tu gagnes 5 XP !")
            core.add_xp(ctx.author.id, 5)
            core.add_mini_score(ctx.author.id, "highermean", 1)
        else:
            await ctx.send(f"‚ùå Mauvais choix. **{t1}** : {s1}/100, **{t2}** : {s2}/100.")

    @commands.command(name="guessepisodes")
    async def guess_episodes(self, ctx: commands.Context) -> None:
        """Devine le nombre d'√©pisodes d‚Äôun anime.

        Le bot choisit au hasard un anime non‚Äëadulte dont le nombre
        d'√©pisodes est connu. R√©ponds par un entier ; une r√©ponse
        exacte ou dans une marge de ¬±10 % (ou ¬±5 √©pisodes) rapporte 8 XP.
        """
        await ctx.send("üé¨ S√©lection d‚Äôun anime‚Ä¶")
        anime = None
        # On tente plusieurs fois de trouver un anime avec un nombre d'√©pisodes
        for _ in range(5):
            page = random.randint(1, 500)
            query = f'''
            query {{
              Page(perPage: 1, page: {page}) {{
                media(type: ANIME, isAdult: false, sort: POPULARITY_DESC) {{
                  title {{ romaji }}
                  episodes
                  coverImage {{ medium }}
                }}
              }}
            }}
            '''
            data = core.query_anilist(query)
            try:
                candidate = data["data"]["Page"]["media"][0]
                if candidate.get("episodes") and isinstance(candidate.get("episodes"), int):
                    anime = candidate
                    break
            except Exception:
                continue
        if not anime:
            await ctx.send("‚ùå Impossible de r√©cup√©rer un anime avec un nombre d'√©pisodes connu.")
            return
        title = anime["title"]["romaji"]
        episodes = anime["episodes"]
        embed = discord.Embed(
            title="üéûÔ∏è Mini‚Äëjeu : Combien d‚Äô√©pisodes ?",
            description=(
                f"Combien d‚Äô√©pisodes compte **{title}** ?\n"
                "R√©ponds par un nombre (ex : `24`)."
            ),
            color=discord.Color.blue(),
        )
        img_url = anime.get("coverImage", {}).get("medium")
        if img_url:
            embed.set_thumbnail(url=img_url)
        await ctx.send(embed=embed)
        def check(m: discord.Message) -> bool:
            return m.author == ctx.author and m.channel == ctx.channel
        try:
            msg = await self.bot.wait_for("message", timeout=20.0, check=check)
        except Exception:
            await ctx.send("‚è∞ Temps √©coul√© ! Le mini‚Äëjeu est annul√©.")
            return
        # Analyse de la r√©ponse
        try:
            guessed = int(msg.content.strip())
        except ValueError:
            await ctx.send(f"‚ùå Ce n‚Äôest pas un nombre valide. **{title}** a **{episodes}** √©pisodes.")
            return
        # Tol√©rance : ¬±10 % ou ¬±5 √©pisodes (le plus grand des deux)
        tolerance = max(int(episodes * 0.1), 5)
        if abs(guessed - episodes) <= tolerance:
            await ctx.send(
                f"‚úÖ Bravo ! **{title}** compte {episodes} √©pisodes (tu as r√©pondu {guessed}). Tu gagnes 8 XP !"
            )
            core.add_xp(ctx.author.id, 8)
            core.add_mini_score(ctx.author.id, "guessepisodes", 1)
        else:
            await ctx.send(f"‚ùå Rat√©. **{title}** compte {episodes} √©pisodes (tu as r√©pondu {guessed}).")

    @commands.command(name="guessgenre")
    async def guess_genre(self, ctx: commands.Context) -> None:
        """Devine un des genres d‚Äôun anime.

        Le bot choisit un anime populaire et t‚Äôinvite √† deviner l‚Äôun de
        ses genres. Une r√©ponse correcte rapporte 5 XP. Si plusieurs
        genres existent, n‚Äôimporte lequel suffit.
        """
        await ctx.send("üé≠ S√©lection d‚Äôun anime‚Ä¶")
        # Cherche un anime avec des genres list√©s
        anime = None
        for _ in range(5):
            page = random.randint(1, 500)
            query = f'''
            query {{
              Page(perPage: 1, page: {page}) {{
                media(type: ANIME, isAdult: false, sort: POPULARITY_DESC) {{
                  title {{ romaji }}
                  genres
                  coverImage {{ medium }}
                }}
              }}
            }}
            '''
            data = core.query_anilist(query)
            try:
                candidate = data["data"]["Page"]["media"][0]
                genres = candidate.get("genres")
                if genres:
                    anime = candidate
                    break
            except Exception:
                continue
        if not anime:
            await ctx.send("‚ùå Impossible de r√©cup√©rer un anime avec des genres.")
            return
        title = anime["title"]["romaji"]
        genres = [g.lower() for g in anime.get("genres", [])]
        embed = discord.Embed(
            title="üé≠ Mini‚Äëjeu : Devine le genre !",
            description=(
                f"Quel est un des genres de **{title}** ?\n"
                "R√©ponds par un genre (ex : `Action`, `Romance`)."
            ),
            color=discord.Color.magenta(),
        )
        img_url = anime.get("coverImage", {}).get("medium")
        if img_url:
            embed.set_thumbnail(url=img_url)
        await ctx.send(embed=embed)
        def check(m: discord.Message) -> bool:
            return m.author == ctx.author and m.channel == ctx.channel
        try:
            msg = await self.bot.wait_for("message", timeout=20.0, check=check)
        except Exception:
            await ctx.send("‚è∞ Temps √©coul√© ! Le mini‚Äëjeu est annul√©.")
            return
        guess = msg.content.strip().lower()
        if guess in [g.lower() for g in genres]:
            await ctx.send(f"‚úÖ Exact ! Les genres de **{title}** incluent {', '.join(anime['genres'])}. Tu gagnes 5 XP !")
            core.add_xp(ctx.author.id, 5)
            core.add_mini_score(ctx.author.id, "guessgenre", 1)
        else:
            await ctx.send(f"‚ùå Mauvaise r√©ponse. Les genres de **{title}** √©taient : {', '.join(anime['genres'])}.")


async def setup(bot: commands.Bot) -> None:
    await bot.add_cog(MiniGames(bot))
