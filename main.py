# AnimeBot ‚Äî Version finale avec !setchannel, pr√©f√©rences, alertes, !prochains stylis√©
import discord
from discord.ext import commands, tasks
import requests
import json
import locale
import random
import asyncio
import os
import pytz
import re
from datetime import datetime, timedelta, timezone
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO
import unicodedata
import matplotlib.pyplot as plt
from modules.title_cache import load_title_cache, normalize
from modules.title_cache import update_title_cache, load_title_cache
from calendar import monthrange
from babel.dates import format_datetime
from modules.utils import load_json, save_json

# Date actuelle
now = datetime.now()

# Formatage en fran√ßais
formatted_date = format_datetime(now, "EEEE d MMMM y '√†' HH:mm", locale='fr_FR')

print(formatted_date)


PREFERENCES_FILE = "/data/preferences.json"
QUIZ_SCORES_FILE = "/data/quiz_scores.json"
LINKED_FILE = "/data/linked_users.json"
LEVELS_FILE = "/data/quiz_levels.json"
TRACKER_FILE = "/data/anitracker.json"
CHALLENGES_FILE = "/data/challenges.json"
WEEKLY_FILE = "/data/weekly.json"
USER_SETTINGS_FILE = "/data/user_settings.json"
NOTIFIED_FILE = "/data/notified.json"
LINKS_FILE = "/data/user_links.json"

TITLE_CACHE_FILE = "/data/title_cache.json"

WINNER_FILE = "/data/quiz_winner.json"

def load_quiz_winner():
    if not os.path.exists(WINNER_FILE):
        return {}
    with open(WINNER_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_quiz_winner(data):
    with open(WINNER_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def load_title_cache():
    if os.path.exists(TITLE_CACHE_FILE):
        with open(TITLE_CACHE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

title_cache = load_title_cache()

for path in [
    PREFERENCES_FILE, QUIZ_SCORES_FILE, TRACKER_FILE, WEEKLY_FILE,
    LINKED_FILE, LEVELS_FILE, CHALLENGES_FILE,
    USER_SETTINGS_FILE, NOTIFIED_FILE, LINKS_FILE
]:
    if not os.path.exists(path):
        with open(path, "w") as f:
            json.dump({}, f)

for path in [
    PREFERENCES_FILE, QUIZ_SCORES_FILE, "/data/.json", "/data/weekly.json",
    "/data/linked_users.json", "/data/quiz_levels.json", "/data/challenges.json",
    USER_SETTINGS_FILE, NOTIFIED_FILE, LINKS_FILE
]:
    if not os.path.exists(path):
        with open(path, "w") as f:
            json.dump({}, f)

def title_variants(title_data):
    titles = set()

    for key in ['romaji', 'english', 'native']:
        t = title_data.get(key)
        if not t:
            continue
        base = normalize(t)
        titles.add(base)
        titles.add(re.sub(r"(s\d|season|part|final|ver\d+|[^a-zA-Z\s])", "", base))
        for word in base.split():
            if len(word) >= 4:
                titles.add(word)

    # Ajout depuis le cache
    cache = load_title_cache()
    for entry in cache.values():
        for t in entry["titles"]:
            titles.add(t)

    return set(titles)
    
def normalize(text):
    import unicodedata
    if not text:
        return ""
    text = ''.join(c for c in unicodedata.normalize('NFD', text)
                   if unicodedata.category(c) != 'Mn')  # supprime les accents
    return ''.join(e for e in text.lower() if e.isalnum() or e.isspace()).strip()

def update_title_cache():
    print("[CACHE] Mise √† jour des titres AniList...")

    query = '''
    query ($name: String) {
      MediaListCollection(userName: $name, type: ANIME, status_in: [CURRENT, COMPLETED, PAUSED, DROPPED, PLANNING]) {
        lists {
          entries {
            media {
              title { romaji english native }
            }
          }
        }
      }
    }
    '''
    variables = {"name": ANILIST_USERNAME}

    try:
        result = query_anilist(query, variables)
        if not result or "data" not in result:
            raise ValueError("Donn√©es manquantes ou incorrectes dans la r√©ponse AniList.")

        entries = result["data"]["MediaListCollection"]["lists"]
        all_titles = []

        for lst in entries:
            for entry in lst["entries"]:
                titles = entry["media"]["title"]
                all_titles.append(titles)

        cache = {}
        for t in all_titles:
            variants = title_variants(t)
            for v in variants:
                cache[v] = t["romaji"]

        save_json("title_cache.json", cache)
        print(f"[CACHE ‚úÖ] {len(cache)} titres ajout√©s au cache.")

    except Exception as e:
        print(f"[CACHE ‚ùå] Erreur lors de la mise √† jour : {e}")
        
def title_variants(title_data):
    titles = set()

    # 1. Titres de base (romaji, english, native)
    for key in ['romaji', 'english', 'native']:
        t = title_data.get(key)
        if not t:
            continue
        base = normalize(t)
        clean = re.sub(r"(saison|season|s\d|2nd|second|3rd|third|final|part \d+|ver\d+|[^\w\s])", "", base, flags=re.IGNORECASE).strip()
        titles.add(base)
        titles.add(clean)
        for word in clean.split():
            if len(word) >= 4:
                titles.add(word)

    # 2. Titres issus du cache (automatique)
    cache = load_title_cache()
    for entry in cache.values():
        variants = entry["titles"]
        titles.update(variants)

    # 3. Synonymes manuels (ceux que tu as d√©j√† ajout√©s √† la main)
    aliases = {
        "one piece": {"op", "onepiece", "op film", "one piece stampede", "stampede"},
        "hajime no ippo": {"ippo", "hni", "champion road", "hajime"},
        "attack on titan": {"snk", "aot", "shingeki", "shingeki no kyojin"},
        "my hero academia": {"mha", "boku no hero academia", "hero academia"},
        "sword art online": {"sao"},
        "demon slayer": {"kimetsu no yaiba", "kny", "demon slayer kimetsu"},
        "jujutsu kaisen": {"jjk"},
        "hunter x hunter": {"hxh"},
        "tokyo ghoul": {"tg"},
        "nier automata": {"nier"},
        "bleach": {"bleach", "tybw"},
        "mob psycho 100": {"mob", "mob psycho"},
        "one punch man": {"opm"},
        "naruto": {"naruto", "shippuden"},
        "black clover": {"blackclover"},
        "dr stone": {"dr. stone"},
        "re zero": {"rezero", "re:zero"},
        "tokyo revengers": {"revengers", "tokrev"},
        "chainsaw man": {"chainsawman", "csm"},
        "fire force": {"fire force", "enka"},
        "fairy tail": {"fairytail", "ft"},
        "blue lock": {"bluelock", "bl"},
        "spy x family": {"spyxfamily", "spy family", "sxF"},
        "classroom of the elite": {"cote", "classroom"},
        "the rising of the shield hero": {"tate", "shield hero"},
        "made in abyss": {"mia", "abyss"},
        "the promised neverland": {"tpn", "yakusoku"},
        "oshi no ko": {"oshinoko", "onk"},
        "hell‚Äôs paradise": {"jigokuraku"},
        "vinland saga": {"vinland"},
        "bocchi the rock": {"bocchi"},
        "solo leveling": {"sololeveling", "sl"},
        "mashle": {"mashle"},
        "frieren": {"sousou no frieren", "frieren"},
        "steins gate": {"steins", "sg"},
        "meitantei conan": {"detective conan", "conan"},
        "no game no life": {"ngnl"},
        "future diary": {"mirai nikki"},
        "parasyte": {"kiseijuu"},
        "rent a girlfriend": {"kanokari"},
        "your name": {"kimi no na wa", "yourname"},
        "a silent voice": {"koe no katachi", "silent voice"},
        "charlotte": {"charlotte"},
        "toradora": {"toradora"},
        "angel beats": {"angelbeats"},
        "clannad": {"clannad"},
        "violet evergarden": {"violet"},
        "code geass": {"cg"},
        "death note": {"deathnote"},
        "erased": {"boku dake ga inai machi"},
        "akame ga kill": {"akame"},
        "zom 100": {"zom100", "bucket list"},
        "86": {"eighty six"},
        "mushoku tensei": {"jobless reincarnation", "mushoku"},
        "kaguya sama": {"love is war", "kaguya"},
        "noragami": {"yato"},
        "five toubun": {"quintuplets", "5toubun"},
        "reincarnated as a slime": {"tensura"},
        "fullmetal alchemist": {"fma", "brotherhood"},
        "danganronpa": {"dr"},
        "k-on": {"kon"},
        "your lie in april": {"shigatsu"},
        "bunny girl senpai": {"rascal", "bunny girl"},
        "horimiya": {"horimiya"},
        "another": {"another"},
        "angel beats": {"angel beats"},
        "gintama": {"gintoki"},
        "overlord": {"overlord"},
        "eromanga sensei": {"eromanga"},
        "highschool dxd": {"dxd"},
        "tokyo avengers": {"tokrev"},
        "konosuba": {"konosuba"},
        "naruto shippuden": {"naruto", "shippuden"}
    }

    base_all = [normalize(title_data.get(k, "")) for k in ['romaji', 'english', 'native']]
    for b in base_all:
        for key, values in aliases.items():
            if key in b:
                titles.update(values)

    return set(normalize(t) for t in titles if len(t) > 1)


# üìÅ Chargement des pr√©f√©rences utilisateur
PREFERENCES_FILE = "/data/preferences.json"

QUIZ_SCORES_FILE = "/data/quiz_scores.json"

def get_user_anilist(user_id):
    data = load_links()
    return data.get(str(user_id))

def load_tracker():
    try:
        with open("/data/.json", "r") as f:
            return json.load(f)
    except:
        return {}

def save_tracker(data):
    with open("/data/.json", "w") as f:
        json.dump(data, f, indent=2)

def get_xp_bar(xp, total, length=10):
    filled = int((xp / total) * length)
    empty = length - filled
    return "‚ñ∞" * filled + "‚ñ±" * empty

def load_weekly():
    try:
        with open("/data/weekly.json", "r") as f:
            return json.load(f)
    except:
        return {}

def save_weekly(data):
    with open("/data/weekly.json", "w") as f:
        json.dump(data, f, indent=2)

def load_scores():
    if not os.path.exists(QUIZ_SCORES_FILE):
        return {}
    with open(QUIZ_SCORES_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_scores(scores):
    with open(QUIZ_SCORES_FILE, "w", encoding="utf-8") as f:
        json.dump(scores, f, indent=2, ensure_ascii=False)

def load_links():
    try:
        with open("/data/linked_users.json", "r") as f:
            return json.load(f)
    except:
        return {}

def save_links(data):
    with open("/data/linked_users.json", "w") as f:
        json.dump(data, f, indent=2)

def query_anilist(query: str, variables: dict = None):
    try:
        response = requests.post(
            "https://graphql.anilist.co",
            json={"query": query, "variables": variables or {}},
            headers={"Content-Type": "application/json"}
        )
        response.raise_for_status()
        return response.json()
    except:
        return None

def load_levels():
    try:
        with open("/data/quiz_levels.json", "r") as f:
            return json.load(f)
    except:
        return {}

def save_levels(data):
    with open("/data/quiz_levels.json", "w") as f:
        json.dump(data, f, indent=2)

def add_xp(user_id, amount=10):
    user_id = str(user_id)
    data = load_levels()
    if user_id not in data:
        data[user_id] = {"xp": 0, "level": 0}

    data[user_id]["xp"] += amount
    level = data[user_id]["level"]
    xp_needed = (level + 1) * 100
    leveled_up = False

    while data[user_id]["xp"] >= xp_needed:
        data[user_id]["xp"] -= xp_needed
        data[user_id]["level"] += 1
        leveled_up = True
        xp_needed = (data[user_id]["level"] + 1) * 100

    save_levels(data)
    return leveled_up, data[user_id]["level"]

def load_challenges():
    try:
        with open("/data/challenges.json", "r") as f:
            return json.load(f)
    except:
        return {}

def save_challenges(data):
    with open("/data/challenges.json", "w") as f:
        json.dump(data, f, indent=2)

preferences = load_json(PREFERENCES_FILE)
def save_preferences():
    save_json(PREFERENCES_FILE, preferences)

ImageFont.truetype("fonts/DejaVuSans.ttf", 18)
ImageFont.truetype("fonts/DejaVuSans-Bold.ttf", 24)

start_time = datetime.now(timezone.utc)


# Configuration initiale
DISCORD_TOKEN = os.getenv("DISCORD_BOT_TOKEN")
ANILIST_USERNAME = "Zirnoixdcoco"
TIMEZONE = pytz.timezone("Europe/Paris")

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents, help_command=None)

# Fichiers JSON
CONFIG_FILE = "config.json"
USER_SETTINGS_FILE = "/data/user_settings.json"
NOTIFIED_FILE = "/data/notified.json"

LINKS_FILE = "/data/user_links.json"

# Charger les liens existants
if os.path.exists(LINKS_FILE):
    with open(LINKS_FILE, "r", encoding="utf-8") as f:
        user_links = json.load(f)
        # Convert keys to integers (json keys are always strings)
        user_links = {int(k): v for k, v in user_links.items()}
else:
    user_links = {}

def save_user_links():
    with open(LINKS_FILE, "w", encoding="utf-8") as f:
        json.dump(user_links, f, ensure_ascii=False, indent=2)

OWNER_ID = 180389173985804288

def load_json(file, default):
    if not os.path.exists(file):
        return default
    with open(file, "r") as f:
        return json.load(f)

def save_json(file, data):
    with open(file, "w") as f:
        json.dump(data, f, indent=2)

def get_config():
    return load_json(CONFIG_FILE, {})

def save_config(data):
    save_json(CONFIG_FILE, data)

user_settings = load_json(USER_SETTINGS_FILE, {})
notified = set(load_json(NOTIFIED_FILE, []))

jours_fr = {
    "Monday": "Lundi", "Tuesday": "Mardi", "Wednesday": "Mercredi", "Thursday": "Jeudi",
    "Friday": "Vendredi", "Saturday": "Samedi", "Sunday": "Dimanche"
}

def genre_emoji(genres):
    emojis = {
        "Action": "‚öîÔ∏è", "Comedy": "üòÇ", "Drama": "üé≠", "Fantasy": "üßô‚Äç‚ôÇÔ∏è", "Romance": "üíï",
        "Sci-Fi": "üöÄ", "Horror": "üëª", "Mystery": "üïµÔ∏è", "Sports": "üèÖ", "Music": "üéµ",
        "Slice of Life": "üçÉ"
    }
    for g in genres:
        if g in emojis: return emojis[g]
    return "üé¨"

def build_embed(ep, dt):
    emoji = genre_emoji(ep["genres"])
    embed = discord.Embed(
        title=f"{emoji} {ep['title']} ‚Äî √âpisode {ep['episode']}",
        description=f"üìÖ {jours_fr[dt.strftime('%A')]} {dt.strftime('%d/%m')} √† {dt.strftime('%H:%M')}",
        color=discord.Color.blurple()
    )
    embed.set_thumbnail(url=ep["image"])
    return embed

def get_upcoming_episodes(username):
    import requests
    import json

    query = '''
    query ($name: String) {
      MediaListCollection(userName: $name, type: ANIME) {
        lists {
          entries {
            media {
              id
              title { romaji }
              coverImage { extraLarge } 
              nextAiringEpisode { airingAt episode }
              genres
            }
          }
        }
      }
    }
    '''

    variables = {"name": username}
    url = "https://graphql.anilist.co"

    try:
        response = requests.post(url, json={"query": query, "variables": variables})
        response.raise_for_status()
        data = response.json()

        entries = []
        for lst in data["data"]["MediaListCollection"]["lists"]:
            for entry in lst["entries"]:
                media = entry.get("media")
                if not media:
                    continue

                next_ep = media.get("nextAiringEpisode")
                if not next_ep or not next_ep.get("airingAt") or not next_ep.get("episode"):
                    continue

                entries.append({
                    "id": media.get("id"),
                    "title": media.get("title", {}).get("romaji", "Inconnu"),
                    "episode": next_ep["episode"],
                    "airingAt": next_ep["airingAt"],
                    "genres": media.get("genres", []),
                    "image": media.get("coverImage", {}).get("extraLarge") 
                })

        print(f"üéØ {len(entries)} √©pisodes trouv√©s pour {username}", flush=True)
        return entries

    except Exception as e:
        print(f"[Erreur AniList] {e}", flush=True)
        return []



# Commande !prochains en un seul embed
@bot.command(name="prochains")
async def prochains(ctx, *args):
    filter_genre = None
    limit = 10

    # Traitement des arguments : genre + nombre ou "all"
    for arg in args:
        if arg.isdigit():
            limit = min(100, int(arg))
        elif arg.lower() in ["all", "tout"]:
            limit = 100
        else:
            filter_genre = arg.capitalize()

    episodes = get_upcoming_episodes(ANILIST_USERNAME)
    if not episodes:
        await ctx.send("Aucun √©pisode √† venir.")
        return

    # Filtrer par genre si applicable
    if filter_genre:
        episodes = [ep for ep in episodes if filter_genre in ep.get("genres", [])]

    if not episodes:
        await ctx.send(f"Aucun √©pisode trouv√© pour le genre **{filter_genre}**.")
        return

    episodes = sorted(episodes, key=lambda e: e["airingAt"])[:limit]
    pages = []
    group_size = 5

    for i in range(0, len(episodes), group_size):
        group = episodes[i:i+group_size]
        embed = discord.Embed(
            title=f"üìÖ Prochains √©pisodes ‚Äî Page {len(pages)+1}",
            description=f"Voici les √©pisodes √† venir{f' pour le genre **{filter_genre}**' if filter_genre else ''} :",
            color=discord.Color.blurple()
        )
        for ep in group:
            dt = datetime.fromtimestamp(ep["airingAt"], tz=pytz.utc).astimezone(TIMEZONE)
            emoji = genre_emoji(ep["genres"])
        
        # ‚úÖ Variables √† calculer avant add_field
            date_fr = format_datetime(dt, "d MMMM", locale='fr_FR')
            jour = jours_fr[dt.strftime('%A')]
            heure = dt.strftime('%H:%M')
            value = f"üóìÔ∏è {jour} {date_fr} √† {heure}"

            embed.add_field(
                name=f"{emoji} {ep['title']} ‚Äî √âpisode {ep['episode']}",
                value=value,
                inline=False
            )

        pages.append(embed)


    class Paginator(discord.ui.View):
        def __init__(self): super().__init__(timeout=120); self.index = 0
        @discord.ui.button(label="‚¨ÖÔ∏è", style=discord.ButtonStyle.secondary)
        async def prev(self, i, b):
            self.index = max(0, self.index - 1)
            pages[self.index].title = f"üìÖ Prochains √©pisodes ‚Äî Page {self.index+1}/{len(pages)}"
            await i.response.edit_message(embed=pages[self.index], view=self)

        @discord.ui.button(label="‚û°Ô∏è", style=discord.ButtonStyle.secondary)
        async def next(self, i, b):
            self.index = min(len(pages)-1, self.index + 1)
            pages[self.index].title = f"üìÖ Prochains √©pisodes ‚Äî Page {self.index+1}/{len(pages)}"
            await i.response.edit_message(embed=pages[self.index], view=self)

        @discord.ui.button(label="‚ùå Fermer", style=discord.ButtonStyle.danger)
        async def close(self, i, b):
            await i.message.delete()

    if not pages:
        await ctx.send("Aucun √©pisode √† afficher.")
    else:
        pages[0].title = f"üìÖ Prochains √©pisodes ‚Äî Page 1/{len(pages)}"
        await ctx.send(embed=pages[0], view=Paginator())

@bot.command(name="weekly")
async def weekly(ctx, sub=None):
    user_id = str(ctx.author.id)
    data = load_weekly()
    if sub == "complete":
        last = data.get(user_id, {}).get("last_completed")
        if last:
            from datetime import datetime, timedelta
            last_time = datetime.fromisoformat(last)
            if datetime.now() - last_time < timedelta(days=7):
                next_time = last_time + timedelta(days=7)
                wait_days = (next_time - datetime.now()).days + 1
                await ctx.send(f"‚è≥ Tu as d√©j√† valid√© ton d√©fi cette semaine.\nTu pourras le refaire dans **{wait_days} jour(s)**.")
                return

        if user_id not in data or not data[user_id].get("active"):
            await ctx.send("‚ùå Tu n‚Äôas pas de d√©fi en cours.")
            return

        challenge = data[user_id]["active"]
        history = data[user_id].get("history", [])
        history.append({"description": challenge["description"], "completed": True})
        data[user_id]["history"] = history
        data[user_id]["active"] = None
        data[user_id]["last_completed"] = datetime.now().isoformat()  # ‚úÖ ligne √† ajouter
        save_weekly(data)
        add_xp(ctx.author.id, amount=25)
        await ctx.send(f"‚úÖ D√©fi termin√© : **{challenge['description']}** ! Bien jou√© üéâ")
        return

    # Liste d‚Äôobjectifs possibles
    challenges = [
        "Regarder 3 animes du genre Action",
        "Finir un anime de +20 √©pisodes",
        "Donner une note de 10 √† un anime",
        "Regarder un anime en cours de diffusion",
        "Terminer une saison compl√®te en une semaine",
        "D√©couvrir un anime not√© < 70 sur AniList",
        "Regarder un anime de ton genre pr√©f√©r√©",
        "Essayer un anime d‚Äôun genre que tu n‚Äôaimes pas",
        "Faire un duel avec un ami avec `!animebattle`",
        "Compl√©ter un challenge `!anichallenge`"
    ]

    chosen = random.choice(challenges)
    data[user_id] = {
        "active": {"description": chosen},
        "history": data.get(user_id, {}).get("history", [])
    }
    save_weekly(data)
    await ctx.send(f"üìÖ Ton d√©fi de la semaine :\n**{chosen}**\nQuand tu as termin√©, tape `!weekly complete`.")

@bot.command(name="linkanilist")
async def linkanilist(ctx, pseudo: str):
    data = load_links()
    user_id = str(ctx.author.id)
    data[user_id] = pseudo
    save_links(data)
    await ctx.send(f"‚úÖ Ton compte AniList **{pseudo}** a √©t√© li√© √† ton profil Discord.")

@bot.command(name="anichallenge")
async def anichallenge(ctx):
    import random
    import requests

    # V√©rifie si un challenge est d√©j√† en cours
    data = load_challenges()
    user_id = str(ctx.author.id)
    if user_id in data and data[user_id].get("active"):
        await ctx.send(f"üìå Tu as d√©j√† un d√©fi en cours : **{data[user_id]['active']['title']}**.\nUtilise `!challenge complete <note/10>` quand tu l‚Äôas termin√©.")
        return

    # Requ√™te AniList
    for _ in range(10):
        page = random.randint(1, 500)
        query = f'''
        query {{
          Page(perPage: 1, page: {page}) {{
            media(type: ANIME, isAdult: false, sort: POPULARITY_DESC) {{
              id
              title {{ romaji }}
              siteUrl
            }}
          }}
        }}
        '''
        url = "https://graphql.anilist.co"
        try:
            res = requests.post(url, json={"query": query})
            anime = res.json()["data"]["Page"]["media"][0]
            title = anime["title"]["romaji"]
            site = anime["siteUrl"]
            data[user_id] = {
                "active": {"id": anime["id"], "title": title},
                "history": data.get(user_id, {}).get("history", [])
            }
            save_challenges(data)
            await ctx.send(f"üéØ Nouveau d√©fi pour **{ctx.author.display_name}** :\n**{title}**\nüîó {site}\n\nUne fois vu, fais `!challenge complete <note>`")
            return
        except:
            continue

    await ctx.send("‚ùå Impossible de r√©cup√©rer un anime pour le challenge.")

@bot.command(name="debugnext")
async def debug_next(ctx):
    episodes = get_upcoming_episodes(ANILIST_USERNAME)

    count = len(episodes)
    if count == 0:
        await ctx.send("‚ùå Aucun √©pisode d√©tect√©.")
    else:
        await ctx.send(f"üéØ {count} √©pisodes trouv√©s pour **{ANILIST_USERNAME}**.")

    for ep in episodes[:5]:  # Limite √† 5 pour √©viter le spam
        titre = ep["title"]
        num = ep["episode"]
        date = datetime.fromtimestamp(ep["airingAt"], tz=TIMEZONE).strftime("%A %d %B √† %H:%M")
        await ctx.send(f"üì∫ {titre} ‚Äî √âpisode {num} \nüïí Sortie : {date}")

@bot.command(name="anitracker")
async def anitracker(ctx, sub=None, *, title=None):
    user_id = str(ctx.author.id)
    data = load_tracker()

    if sub == "list":
        series = data.get(user_id, [])
        if not series:
            await ctx.send("üì≠ Tu ne suis aucun anime.")
        else:
            await ctx.send(f"üì∫ Animes suivis ({len(series)}):\n" + "\n".join(f"‚Ä¢ {s}" for s in series))
        return

    if sub == "remove":
        if not title:
            await ctx.send("‚ùå Utilise : `!anitracker remove <titre>`")
            return
        series = data.get(user_id, [])
        if title in series:
            series.remove(title)
            data[user_id] = series
            save_tracker(data)
            await ctx.send(f"üóëÔ∏è Tu ne suis plus **{title}**.")
        else:
            await ctx.send(f"‚ùå Tu ne suivais pas **{title}**.")
        return

    # Ajout d‚Äôun nouvel anime
    if not title:
        await ctx.send("‚ùå Utilise : `!anitracker <titre>` pour suivre un anime.")
        return

    series = data.get(user_id, [])
    if title in series:
        await ctx.send(f"üìå Tu suis d√©j√† **{title}**.")
        return

    series.append(title)
    data[user_id] = series
    save_tracker(data)
    await ctx.send(f"‚úÖ Tu suivras **{title}**. Tu recevras un DM √† chaque sortie d‚Äô√©pisode.")

@bot.command(name="challenge")
async def challenge_complete(ctx, subcommand=None, note: int = None):
    if subcommand != "complete" or note is None:
        await ctx.send("‚ùå Utilise : `!challenge complete <note sur 10>`")
        return

    data = load_challenges()
    user_id = str(ctx.author.id)
    if user_id not in data or "active" not in data[user_id]:
        await ctx.send("‚ùå Tu n‚Äôas aucun d√©fi en cours.")
        return

    active = data[user_id]["active"]
    history = data[user_id]["history"]
    history.append({
        "title": active["title"],
        "completed": True,
        "score": note
    })

    data[user_id]["history"] = history
    data[user_id]["active"] = None
    save_challenges(data)
    add_xp(ctx.author.id, amount=15)
    await ctx.send(f"‚úÖ Bien jou√© **{ctx.author.display_name}** ! Tu as termin√© **{active['title']}** avec la note **{note}/10** üéâ")

@bot.command(name="duelstats")
async def duelstats(ctx, opponent: discord.Member = None):
    if opponent is None:
        await ctx.send("‚ùå Utilise : `!duelstats @ami` pour comparer tes stats avec quelqu‚Äôun.")
        return

    data = load_links()
    uid1 = str(ctx.author.id)
    uid2 = str(opponent.id)

    if uid1 not in data or uid2 not in data:
        await ctx.send("‚ùó Les deux joueurs doivent avoir li√© leur compte avec `!linkanilist`.")
        return

    # R√©cup√©ration des deux pseudos Anilist
    user1, user2 = data[uid1], data[uid2]

    query = '''
    query ($name: String) {
      User(name: $name) {
        statistics {
          anime {
            count
            minutesWatched
            meanScore
            genres { genre count }
          }
        }
      }
    }
    '''

    try:
        stats = {}
        for u in [user1, user2]:
            res = requests.post("https://graphql.anilist.co", json={"query": query, "variables": {"name": u}})
            a = res.json()["data"]["User"]["statistics"]["anime"]
            fav = sorted(a["genres"], key=lambda g: g["count"], reverse=True)[0]["genre"] if a["genres"] else "N/A"
            stats[u] = {
                "count": a["count"],
                "score": round(a["meanScore"], 1),
                "days": round(a["minutesWatched"] / 1440, 1),
                "genre": fav
            }

    except:
        await ctx.send("‚ùå Impossible de r√©cup√©rer les statistiques Anilist.")
        return

    # R√©cup√©ration
    s1, s2 = stats[user1], stats[user2]

    def who_wins(a, b): return "üü∞ √âgalit√©" if a == b else "üîº" if a > b else "üîΩ"

    embed = discord.Embed(
        title=f"üìä Duel de stats : {ctx.author.display_name} vs {opponent.display_name}",
        color=discord.Color.blurple()
    )

    embed.add_field(name="üé¨ Anim√©s vus", value=f"{s1['count']} vs {s2['count']} {who_wins(s1['count'], s2['count'])}", inline=False)
    embed.add_field(name="‚≠ê Score moyen", value=f"{s1['score']} vs {s2['score']} {who_wins(s1['score'], s2['score'])}", inline=False)


@bot.command(name="quiztop")
async def quiztop(ctx):
    import calendar

    scores = load_scores()
    if not scores:
        await ctx.send("üèÜ Aucun score enregistr√© pour l‚Äôinstant.")
        return

    leaderboard = sorted(scores.items(), key=lambda x: x[1], reverse=True)[:10]

    def get_title(score):
        levels = [
            (100, "üëë Dieu de l'Anime"),
            (95, "üí´ G√©nie l√©gendaire"),
            (90, "üî• Ma√Ætre incontest√©"),
            (85, "üåü Pro absolu"),
            (80, "üéØ Otaku ultime"),
            (75, "üé¨ Cin√©phile expert"),
            (70, "üß† Strat√®ge anime"),
            (65, "‚ö° Analyste senior"),
            (60, "üì∫ Passionn√© confirm√©"),
            (55, "üéÆ Joueur fid√®le"),
            (50, "üìò Fan r√©gulier"),
            (45, "üí° Connaisseur"),
            (40, "üìÄ Binge-watcher"),
            (35, "üéµ Amateur √©clair√©"),
            (30, "üéôÔ∏è Apprenti curieux"),
            (25, "üìö √âtudiant otaku"),
            (20, "üì¶ D√©butant prometteur"),
            (15, "üå± Petit curieux"),
            (10, "üçº Nouveau joueur"),
            (5,  "üî∞ Padawan"),
            (0,  "üê£ Nouvel arrivant")
        ]
        for threshold, title in levels:
            if score >= threshold:
                return title
        return "‚ùì Inconnu"

    desc = ""
    for i, (uid, score) in enumerate(leaderboard, 1):
        try:
            user = await bot.fetch_user(int(uid))
            title = get_title(score)
            desc += f"{i}. **{user.display_name}** ‚Äî {score} pts {title}\n"
        except:
            continue

    embed = discord.Embed(
        title="üèÜ Classement Anime Quiz",
        description=desc,
        color=discord.Color.gold()
    )

    # ‚è≥ Affiche le temps restant avant reset mensuel
    now = datetime.now(tz=TIMEZONE)
    _, last_day = calendar.monthrange(now.year, now.month)
    reset_date = datetime(now.year, now.month, last_day, 23, 59, tzinfo=TIMEZONE)
    remaining = reset_date - now
    days_left = remaining.days + 1
    embed.set_footer(text=f"‚è≥ R√©initialisation dans {days_left} jour(s)")

    # ü•á Vainqueur du mois pr√©c√©dent
    winner_data = load_json("last_quiz_winner.json", {"username": "Inconnu", "score": 0})
    if winner_data and "uid" in winner_data:
        try:
            prev_user = await bot.fetch_user(int(winner_data["uid"]))
            embed.add_field(
                name="ü•á Vainqueur du mois dernier",
                value=f"**{prev_user.display_name}**",
                inline=False
            )
        except:
            pass

    await ctx.send(embed=embed)


@bot.command(name="animebattle")
async def anime_battle(ctx, adversaire: discord.Member = None):
    if adversaire is None:
        await ctx.send("‚ùå Tu dois mentionner un adversaire : `!animebattle @pseudo`")
        return

    if adversaire.bot:
        await ctx.send("ü§ñ Tu ne peux pas d√©fier un bot.")
        return

    if adversaire == ctx.author:
        await ctx.send("üôÉ Tu ne peux pas te d√©fier toi-m√™me.")
        return

    await ctx.send(f"üéÆ Duel entre **{ctx.author.display_name}** et **{adversaire.display_name}** lanc√© !")

    joueurs = [ctx.author, adversaire]
    scores = {p.id: 0 for p in joueurs}

    for numero in range(1, 4):
        await ctx.send(f"‚ùì Question {numero}/3...")

        anime = None
        for _ in range(10):
            page = random.randint(1, 500)
            query = f'''
            query {{
              Page(perPage: 1, page: {page}) {{
                media(type: ANIME, isAdult: false, sort: SCORE_DESC) {{
                  id
                  title {{ romaji english native }}
                  description(asHtml: false)
                }}
              }}
            }}
            '''
            data = query_anilist(query)
            try:
                anime = data["data"]["Page"]["media"][0]
                break
            except:
                continue

        if not anime:
            await ctx.send("‚ùå Impossible de r√©cup√©rer un anime.")
            return

        # Traduction de la description
        raw_desc = anime.get("description", "Pas de description.").split(".")[0] + "."
        try:
            from deep_translator import GoogleTranslator
            desc = GoogleTranslator(source='auto', target='fr').translate(raw_desc)
        except:
            desc = raw_desc

        embed = discord.Embed(
            title="üß† Devine l‚Äôanime",
            description=f"**Description :**\n{desc}\n\n*15 secondes pour r√©pondre !*",
            color=discord.Color.orange()
        )
        await ctx.send(embed=embed)

        correct_titles = set()

        anime_id = str(anime.get("id"))
        if anime_id in title_cache:
            correct_titles = set(title_cache[anime_id])
        else:
            correct_titles = title_variants(anime["title"])  # fallback au cas o√π


        def check(m):
            return m.author in joueurs and normalize(m.content) in bonnes_reponses

        try:
            msg = await bot.wait_for("message", timeout=15.0, check=check)
            scores[msg.author.id] += 1
            await ctx.send(f"‚úÖ Bonne r√©ponse de **{msg.author.display_name}** !")
        except asyncio.TimeoutError:
            await ctx.send(f"‚è∞ Temps √©coul√©. La bonne r√©ponse √©tait **{anime['title']['romaji']}**.")

    j1, j2 = joueurs
    s1, s2 = scores[j1.id], scores[j2.id]
    if s1 == s2:
        resultat = f"ü§ù √âgalit√© parfaite entre **{j1.display_name}** et **{j2.display_name}** ! ({s1} - {s2})"
    else:
        gagnant = j1 if s1 > s2 else j2
        add_xp(gagnant.id, amount=20)
        resultat = f"üèÜ Victoire de **{gagnant.display_name}** ! Score final : {s1} - {s2}"

    now = datetime.now()
    days_left = monthrange(now.year, now.month)[1] - now.day
    embed.set_footer(text=f"üèÅ R√©initialisation dans {days_left} jour(s) ‚Äî AnimeBot")

    await ctx.send(resultat)

@bot.command(name="myrank")
async def myrank(ctx):
    levels = load_levels()
    lvl = levels.get(str(ctx.author.id), {"xp": 0, "level": 0})
    xp = lvl["xp"]
    level = lvl["level"]
    next_xp = (level + 1) * 100
    bar = get_xp_bar(xp, next_xp)

    embed = discord.Embed(
        title=f"üèÖ Rang de {ctx.author.display_name}",
        color=discord.Color.purple()
    )

    embed.add_field(
        name="üéÆ Niveau & XP",
        value=f"Lv. {level} ‚Äì {xp}/{next_xp} XP\n`{bar}`\nTitre : **{get_title(level)}**",
        inline=False
    )

    await ctx.send(embed=embed)

# Syst√®me de titres fun
def get_title(level):
    titles = [
        (0, "üå± D√©butant"),
        (2, "üìò Curieux"),
        (4, "üéß Binge-watcheur"),
        (6, "ü•¢ Ramen addict"),
        (8, "üßë‚Äçüéì Apprenti Weeb"),
        (10, "üéÆ Fan de Shonen"),
        (12, "üé≠ Explorateur de genres"),
        (14, "üì∫ Watcher de l'extr√™me"),
        (16, "üß† Analyste amateur"),
        (18, "üî• Otaku confirm√©"),
        (20, "ü™© Esprit de convention"),
        (22, "üß≥ Voyageur du multigenre"),
        (24, "üéôÔ∏è Dubb√© en VOSTFR"),
        (26, "üìö Encyclopedia anim√©e"),
        (28, "üí• Protagoniste secondaire"),
        (30, "üé¨ Critique d'√©lite"),
        (32, "üóæ Strat√®ge de planning"),
        (34, "üêâ Dompteur de shonen"),
        (36, "üß¨ Th√©oricien d'univers"),
        (38, "üß≥ Itin√©rant du sakuga"),
        (40, "üå† Otaku ascendant"),
        (43, "üéØ Tacticien de la hype"),
        (46, "üõ°Ô∏è D√©fenseur du bon go√ªt"),
        (50, "üëë Ma√Ætre du classement MAL"),
        (52, "üß© Gardien du lore oubli√©"),
        (55, "üåÄ T√©l√©port√© dans un isekai"),
        (58, "üí´ Architecte de saison"),
        (60, "üìÄ Possesseur de l‚Äôultime DVD"),
        (63, "ü•∑ Fan d‚Äôopenings introuvables"),
        (66, "üßõ Mi-humain, mi-anime"),
        (70, "üé¥ D√©tenteur de cartes rares"),
        (74, "ü™ê L√©gende du slice of life"),
        (78, "üßù Mage du genre romance"),
        (82, "‚òÑÔ∏è H√©ros du binge infini"),
        (86, "üó°Ô∏è Gardien du storytelling"),
        (90, "üî± Titan de la narration"),
        (91, "üîÆ Proph√®te de la japanimation"),
        (93, "üßô Sage des opening 2000+"),
        (95, "üïäÔ∏è √âmissaire de Kyoto Animation"),
        (97, "üï∂Ô∏è Strat√®ge d'univers partag√©s"),
        (99, "üëº Incarnation de la passion"),
        (100, "üß† Le Grand Archiviste Supr√™me üèÜ")
    ]

    result = "üå± D√©butant"
    for lvl, name in titles:
        if level >= lvl:
            result = name
        else:
            break
    return result

    scores = load_scores()
    user_id = str(ctx.author.id)


    def get_title(score):
        if score >= 15:
            return "üß† L√©gende"
        elif score >= 10:
            return "üî• Otaku"
        elif score >= 6:
            return "üí° Connaisseur"
        elif score >= 3:
            return "üì∫ Amateur"
        else:
            return "üå± D√©butant"

    sorted_scores = sorted(scores.items(), key=lambda x: x[1], reverse=True)
    rank = next((i + 1 for i, (uid, _) in enumerate(sorted_scores) if uid == user_id), None)
    score = scores[user_id]
    title = get_title(score)

    embed = discord.Embed(
        title=f"üéñÔ∏è Ton rang dans l'Anime Quiz",
        description=(
            f"**üë§ Pseudo :** {ctx.author.display_name}\n"
            f"**üèÖ Rang :** #{rank} sur {len(sorted_scores)} joueurs\n"
            f"**üî¢ Score :** {score} points\n"
            f"**üéØ Titre :** {title}"
        ),
        color=discord.Color.orange()
    )


@bot.command(name="todayinhistory")
async def todayinhistory(ctx):
    day = datetime.now().day
    month = datetime.now().month

    query = f'''
    query {{
      Page(perPage: 1, sort: START_DATE_DESC) {{
        media(type: ANIME, startDate_like: "%-{month:02d}-{day:02d}") {{
          title {{ romaji }}
          startDate {{ year }}
          siteUrl
        }}
      }}
    }}
    '''
    data = query_anilist(query)
    if not data or not data["data"]["Page"]["media"]:
        await ctx.send("‚ùå Aucun √©v√©nement marquant trouv√© pour aujourd‚Äôhui.")
        return

    anime = data["data"]["Page"]["media"][0]
    title = anime["title"]["romaji"]
    year = anime["startDate"]["year"]
    url = anime["siteUrl"]

    embed = discord.Embed(
        title="üìÖ Ce jour-l√† dans l'histoire de l'anime",
        description=f"En **{year}**, *[{title}]({url})* sortait le **{day}/{month}** !",
        color=discord.Color.blue()
    )
    await ctx.send(embed=embed)

import matplotlib.pyplot as plt

@bot.command(name="topanime")
async def topanime(ctx):
    now = datetime.now()
    month = now.month
    year = now.year
    if month in [12, 1, 2]: season = "WINTER"
    elif month in [3, 4, 5]: season = "SPRING"
    elif month in [6, 7, 8]: season = "SUMMER"
    else: season = "FALL"

    query = f'''
    query {{
      Page(perPage: 10) {{
        media(season: {season}, seasonYear: {year}, type: ANIME, isAdult: false, sort: SCORE_DESC) {{
          title {{ romaji }}
          averageScore
          siteUrl
        }}
      }}
    }}
    '''
    data = query_anilist(query)

    # V√©rifications robustes
    if (
        not data
        or not data.get("data")
        or not data["data"].get("Page")
        or not data["data"]["Page"].get("media")
    ):
        await ctx.send("‚ùå Impossible de r√©cup√©rer le top.")
        return

    entries = data["data"]["Page"]["media"]
    desc = ""
    for i, anime in enumerate(entries, 1):
        name = anime.get("title", {}).get("romaji", "Inconnu")
        score = anime.get("averageScore", "??")
        url = anime.get("siteUrl", "")
        desc += f"{i}. [{name}]({url}) ‚Äì ‚≠ê {score}\n"

    embed = discord.Embed(title="üî• Top 10 anim√©s de la saison", description=desc, color=discord.Color.gold())
    await ctx.send(embed=embed)


@bot.command(name="seasonal")
async def seasonal(ctx):
    query = '''
    query {
      Page(perPage: 10) {
        media(type: ANIME, seasonYear: 2025, season: SUMMER, sort: POPULARITY_DESC) {
          title { romaji }
          siteUrl
        }
      }
    }
    '''
    data = query_anilist(query)
    if not data:
        await ctx.send("‚ùå Erreur AniList.")
        return

    entries = data["data"]["Page"]["media"]
    desc = ""
    for anime in entries:
        desc += f"‚Ä¢ [{anime['title']['romaji']}]({anime['siteUrl']})\n"

    embed = discord.Embed(title="üå∏ Animes de la saison (√©t√© 2025)", description=desc, color=discord.Color.green())
    await ctx.send(embed=embed)

@bot.command(name="search")
async def search_anime(ctx, *, title: str):
    query = '''
    query ($search: String) {
      Media(search: $search, type: ANIME) {
        title { romaji }
        description(asHtml: false)
        siteUrl
        coverImage { large }
        averageScore
      }
    }
    '''
    variables = {"search": title}
    data = query_anilist(query, variables)
    if not data or not data.get("data", {}).get("Media"):
        await ctx.send("‚ùå Aucun anime trouv√©.")
        return

    anime = data["data"]["Media"]
    desc = anime["description"].split(".")[0] + "."

    embed = discord.Embed(
        title=f"üîç {anime['title']['romaji']}",
        description=f"{desc}\n\n‚≠ê Score moyen : {anime['averageScore']}",
        color=discord.Color.blue(),
        url=anime["siteUrl"]
    )
    embed.set_image(url=anime["coverImage"]["large"])
    await ctx.send(embed=embed)

@bot.command(name="unlink")
async def unlink(ctx):
    data = load_links()
    user_id = str(ctx.author.id)
    if user_id in data:
        del data[user_id]
        save_links(data)
        await ctx.send("üîó Ton lien AniList a bien √©t√© supprim√©.")
    else:
        await ctx.send("‚ùå Aucun compte AniList n‚Äô√©tait li√© √† ce profil.")


@bot.command(name="mystats")
async def mystats(ctx):
    import requests
    from PIL import Image, ImageDraw, ImageFont, ImageFilter
    from io import BytesIO
    import os

    def get_badge_file(count):
        if count >= 2000:
            return "1f451.png"
        elif count >= 1600:
            return "1f453.png"
        elif count >= 1300:
            return "1f9e0.png"
        elif count >= 850:
            return "1f525.png"
        elif count >= 400:
            return "1f4fd.png"
        elif count >= 150:
            return "1f4d5.png"
        else:
            return "1f95a.png"

    def emoji_file(name):
        path = f"Emojis/{name}"
        return path if os.path.exists(path) else None

    user_links = load_links()
    user_id = str(ctx.author.id)
    username = user_links.get(user_id)
    if not username:
        await ctx.send("‚ùå Tu dois lier ton compte avec `!linkanilist <pseudo>` avant d‚Äôutiliser cette commande.")
        return

    query = '''
    query ($name: String) {
      User(name: $name) {
        name
        avatar { large }
        bannerImage
        statistics {
          anime {
            count
            minutesWatched
            meanScore
            genres { genre count }
          }
        }
        siteUrl
      }
    }
    '''

    try:
        response = requests.post("https://graphql.anilist.co", json={"query": query, "variables": {"name": username}})
        data = response.json()["data"]["User"]
    except:
        await ctx.send("üö´ Erreur en contactant AniList.")
        return

    stats = data["statistics"]["anime"]
    favorite_genre = max(stats["genres"], key=lambda g: g["count"])["genre"] if stats["genres"] else "N/A"
    avatar_url = data["avatar"]["large"]
    banner_url = data.get("bannerImage")
    site_url = data["siteUrl"]
    count = stats["count"]
    days = round(stats["minutesWatched"] / 1440, 1)
    score = round(stats["meanScore"], 1)

    # Cr√©ation de l'image
    width, height = 800, 300
    card = Image.new("RGBA", (width, height), (0, 0, 0, 255))

    try:
        banner = Image.open(BytesIO(requests.get(banner_url).content)).resize((width, height)).convert("RGBA")
    except:
        banner = Image.new("RGBA", (width, height), (40, 40, 40, 255))

    blur = banner.filter(ImageFilter.GaussianBlur(3))
    overlay = Image.new("RGBA", (width, height), (0, 0, 0, 160))
    card = Image.alpha_composite(blur, overlay)

    draw = ImageDraw.Draw(card)
    font_bold = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 26)
    font_text = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 20)

    # Avatar
    try:
        avatar = Image.open(BytesIO(requests.get(avatar_url).content)).resize((110, 110)).convert("RGBA")
        mask = Image.new("L", avatar.size, 0)
        ImageDraw.Draw(mask).ellipse((0, 0, 110, 110), fill=255)
        card.paste(avatar, (40, 90), mask)
    except:
        pass

    # Badge
    badge_path = emoji_file(get_badge_file(count))
    if badge_path:
        badge = Image.open(badge_path).resize((48, 48)).convert("RGBA")
        card.paste(badge, (700, 30), badge)

    # Infos
    draw.text((180, 30), f"{data['name']}", font=font_bold, fill="white")

    y = 80
    infos = [
        ("1f4fd.png", f"Anim√©s vus : {count}"),
        ("23f1.png", f"Temps total : {days} jours"),
        ("2b50.png", f"Score moyen : {score}"),
        ("1f3ad.png", f"Genre pr√©f√©r√© : {favorite_genre}")
    ]

    for emoji, text in infos:
        icon_path = emoji_file(emoji)
        if icon_path:
            try:
                icon = Image.open(icon_path).resize((28, 28)).convert("RGBA")
                card.paste(icon, (180, y), icon)
            except:
                pass
        draw.text((220, y), text, font=font_text, fill="white")
        y += 35

    draw.text((180, 220), site_url, font=font_text, fill="white")

    # Envoi
    path = f"/tmp/{username}_mystats.png"
    card.save(path)
    with open(path, "rb") as f:
        await ctx.send(file=discord.File(f, filename=f"{username}_mystats.png"))

# Commande pour voir les stats
@bot.command(name="stats")
async def stats(ctx, username: str):
    import requests
    from PIL import Image, ImageDraw, ImageFont, ImageFilter, ImageOps
    from io import BytesIO

    query = '''
    query ($name: String) {
      User(name: $name) {
        name
        avatar { large }
        bannerImage
        statistics {
          anime {
            count
            minutesWatched
            meanScore
            genres { genre count }
          }
        }
        siteUrl
      }
    }
    '''
    url = "https://graphql.anilist.co"
    variables = {"name": username}

    try:
        res = requests.post(url, json={"query": query, "variables": variables})
        data = res.json()["data"]["User"]
    except:
        await ctx.send(f"‚ùå Impossible de r√©cup√©rer le profil **{username}**.")
        return

    stats = data["statistics"]["anime"]
    genres = stats["genres"]
    fav_genre = sorted(genres, key=lambda g: g["count"], reverse=True)[0]["genre"] if genres else "N/A"
    days = round(stats["minutesWatched"] / 1440, 1)

    avatar = Image.open(BytesIO(requests.get(data["avatar"]["large"]).content)).resize((140, 140)).convert("RGBA")
    banner_url = data["bannerImage"] or "https://s4.anilist.co/file/anilistcdn/media/anime/banner/101922-oJxzcFvSTFZg.jpg"
    banner = Image.open(BytesIO(requests.get(banner_url).content)).resize((800, 300)).convert("RGBA")

    # Effet flou + overlay
    blur = banner.filter(ImageFilter.GaussianBlur(3))
    overlay = Image.new("RGBA", blur.size, (0, 0, 0, 160))
    card = Image.alpha_composite(blur, overlay)

    # Avatar rond avec bord
    mask = Image.new("L", (140, 140), 0)
    ImageDraw.Draw(mask).ellipse((0, 0, 140, 140), fill=255)
    avatar = ImageOps.fit(avatar, (140, 140), centering=(0.5, 0.5))
    avatar.putalpha(mask)
    border = Image.new("RGBA", (146, 146), (255, 255, 255, 80))
    border.paste(avatar, (3, 3), avatar)
    card.paste(border, (40, 80), border)

    # Polices
    font1 = ImageFont.truetype("fonts/DejaVuSans-Bold.ttf", 26)
    font2 = ImageFont.truetype("fonts/DejaVuSans.ttf", 20)
    font_badge = ImageFont.truetype("fonts/DejaVuSans.ttf", 20)

    # Texte
    draw = ImageDraw.Draw(card)
    x, y = 210, 30
    draw.text((x, y), data["name"], font=font1, fill="white"); y += 50
    draw.text((x, y), f"üé¨ Anim√©s vus : {stats['count']}", font=font2, fill="white"); y += 30
    draw.text((x, y), f"üïí Temps total : {days} jours", font=font2, fill="white"); y += 30
    draw.text((x, y), f"‚≠ê Score moyen : {round(stats['meanScore'], 1)}", font=font2, fill="white"); y += 30
    draw.text((x, y), f"üé≠ Genre pr√©f√©r√© : {fav_genre}", font=font2, fill="white"); y += 30
    draw.text((x, y), f"üîó {data['siteUrl']}", font=font2, fill="white"); y += 40

    # Badge bonus
    if stats["count"] >= 1000:
        draw.text((x, y), "üèÖ Otaku confirm√©", font=font_badge, fill="#ffdd55")
    elif stats["meanScore"] >= 85:
        draw.text((x, y), "üåü Go√ªt d'√©lite", font=font_badge, fill="#55ddff")

    # Envoi
    output_path = f"/tmp/{username}_styled.png"
    card.save(output_path)

    with open(output_path, "rb") as f:
        await ctx.send(file=discord.File(f, filename=f"{username}_stats.png"))

# Commandes suppl√©mentaires
@bot.command(name="next")
async def next_command(ctx):
    import requests
    from PIL import Image, ImageDraw, ImageFont, ImageFilter
    from io import BytesIO
    from datetime import datetime

    episodes = get_upcoming_episodes(ANILIST_USERNAME)
    if not episodes:
        await ctx.send("üì≠ Aucun √©pisode √† venir trouv√© dans ta liste.")
        return

    next_ep = min(episodes, key=lambda e: e["airingAt"])
    dt = datetime.fromtimestamp(next_ep["airingAt"], tz=TIMEZONE)
    title = next_ep["title"]
    episode = next_ep["episode"]
    genres = next_ep["genres"]
    image_url = next_ep["image"]

    # üñºÔ∏è Image de fond redimensionn√©e fa√ßon "cover"
    try:
        bg_response = requests.get(image_url)
        img = Image.open(BytesIO(bg_response.content)).convert("RGBA")
        aspect = img.width / img.height
        target_width, target_height = 800, 300

        # Crop pour remplir comme "background-size: cover"
        if aspect > (target_width / target_height):
            # Image plus large ‚Üí crop horizontal
            new_width = int(img.height * (target_width / target_height))
            left = (img.width - new_width) // 2
            img = img.crop((left, 0, left + new_width, img.height))
        else:
            # Image plus haute ‚Üí crop vertical
            new_height = int(img.width * (target_height / target_width))
            top = (img.height - new_height) // 2
            img = img.crop((0, top, img.width, top + new_height))

        img = img.resize((target_width, target_height))
    except:
        img = Image.new("RGBA", (800, 300), (30, 30, 30, 255))

    # üå´Ô∏è Flou et overlay sombre
    date_fr = format_datetime(dt, "EEEE d MMMM", locale='fr_FR').capitalize()
    heure = dt.strftime("%H:%M")
    blur = img.filter(ImageFilter.GaussianBlur(3))
    overlay = Image.new("RGBA", blur.size, (0, 0, 0, 160))
    card = Image.alpha_composite(blur, overlay)
    draw = ImageDraw.Draw(card)

    # üìï Polices
    font_title = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 26)
    font_text = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 20)
    
    # üñãÔ∏è Textes
    draw.text((40, 20), "üì∫ Prochain √©pisode √† venir", font=font_title, fill="white")
    draw.text((40, 70), f"{title} ‚Äì √âpisode {episode}", font=font_text, fill="white")
    draw.text((40, 110), f"Heure : {date_fr} √† {heure}", font=font_text, fill="white")
    draw.text((40, 150), "Genres :", font=font_text, fill="white")

    # üéØ Emojis PNG par genre
    GENRE_EMOJI_FILES = {
        "Action": "1f525.png", "Fantasy": "2728.png", "Romance": "1f496.png",
        "Drama": "1f3ad.png", "Comedy": "1f602.png", "Horror": "1f47b.png",
        "Sci-Fi": "1f680.png", "Slice of Life": "1f338.png", "Sports": "26bd.png",
        "Music": "1f3b5.png", "Supernatural": "1f47e.png", "Mecha": "1f916.png",
        "Psychological": "1f52e.png", "Adventure": "1f30d.png", "Thriller": "1f4a5.png",
        "Ecchi": "1f633.png"
    }

    x_start = 130
    y_genre = 150

    for genre in genres[:4]:
        emoji_file = GENRE_EMOJI_FILES.get(genre)
        text_width = draw.textlength(genre, font=font_text)

        if emoji_file:
            try:
                emoji_img = Image.open(f"Emojis/{emoji_file}").resize((22, 22)).convert("RGBA")
                card.paste(emoji_img, (x_start, y_genre), emoji_img)
                x_start += 28
            except:
                pass

        draw.text((x_start, y_genre), genre, font=font_text, fill="white")
        x_start += int(text_width) + 24

    # üíæ Sauvegarde et envoi
    path = f"/tmp/{ctx.author.id}_next.png"
    card.save(path)
    await ctx.send(file=discord.File(path, filename="next.png"))

    
@bot.command(name="monnext")
async def monnext(ctx):
    import requests
    from PIL import Image, ImageDraw, ImageFont, ImageFilter
    from io import BytesIO
    from datetime import datetime

    username = get_user_anilist(ctx.author.id)
    if not username:
        await ctx.send("‚ùå Tu n‚Äôas pas encore li√© ton compte AniList. Utilise `!linkanilist <pseudo>`.")
        return

    episodes = get_upcoming_episodes(username)
    if not episodes:
        await ctx.send("üì≠ Aucun √©pisode √† venir dans ta liste.")
        return

    next_ep = min(episodes, key=lambda e: e["airingAt"])
    dt = datetime.fromtimestamp(next_ep["airingAt"], tz=TIMEZONE)
    title = next_ep["title"]
    episode = next_ep["episode"]
    genres = next_ep["genres"]
    image_url = next_ep["image"]

    # üñºÔ∏è Chargement image et fallback
    try:
        response = requests.get(image_url)
        base_img = Image.open(BytesIO(response.content)).convert("RGBA")

        # Resize proportionnel en gardant le ratio
        base_img.thumbnail((1000, 300), Image.Resampling.LANCZOS)
        bg = Image.new("RGBA", (800, 300), (0, 0, 0, 255))
        x = (800 - base_img.width) // 2
        y = (300 - base_img.height) // 2
        bg.paste(base_img, (x, y))

        blurred = bg.filter(ImageFilter.GaussianBlur(3))
        overlay = Image.new("RGBA", (800, 300), (0, 0, 0, 160))
        card = Image.alpha_composite(blurred, overlay)
    except:
        card = Image.new("RGBA", (800, 300), (20, 20, 20, 255))

    draw = ImageDraw.Draw(card)
    font_title = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 28)
    font_text = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 20)
    date_fr = format_datetime(dt, "EEEE d MMMM", locale='fr_FR').capitalize()
    heure = dt.strftime('%H:%M')

    draw.text((40, 25), "üé¨ Ton prochain √©pisode √† venir", font=font_title, fill="white")
    draw.text((40, 75), f"{title} ‚Äì √âpisode {episode}", font=font_text, fill="white")
    draw.text((40, 110), f"Heure : {date_fr} √† {heure}", font=font_text, fill="white")
    draw.text((40, 150), "Genres :", font=font_text, fill="white")

    # üéØ √âmojis de genres
    GENRE_EMOJI_FILES = {
        "Action": "1f525.png", "Fantasy": "2728.png", "Romance": "1f496.png",
        "Drama": "1f3ad.png", "Comedy": "1f602.png", "Horror": "1f47b.png",
        "Sci-Fi": "1f680.png", "Slice of Life": "1f338.png", "Sports": "26bd.png",
        "Music": "1f3b5.png", "Supernatural": "1f47e.png", "Mecha": "1f916.png",
        "Psychological": "1f52e.png", "Adventure": "1f30d.png", "Thriller": "1f4a5.png",
        "Ecchi": "1f633.png"
    }

    x_start = 130
    y_emoji = 150

    for genre in genres[:4]:
        emoji_file = GENRE_EMOJI_FILES.get(genre)
        text_width = draw.textlength(genre, font=font_text)

        if emoji_file:
            try:
                emoji_img = Image.open(f"Emojis/{emoji_file}").resize((22, 22)).convert("RGBA")
                card.paste(emoji_img, (x_start, y_emoji - 2), emoji_img)
                x_start += 26
            except:
                pass

        draw.text((x_start, y_emoji), genre, font=font_text, fill="white")
        x_start += int(text_width) + 24

    path = f"/tmp/{ctx.author.id}_monnext.png"
    card.save(path)
    await ctx.send(file=discord.File(path, filename="monnext.png"))

@bot.command(name="monplanning")
async def mon_planning(ctx):
    from babel.dates import format_datetime

    username = get_user_anilist(ctx.author.id)
    if not username:
        await ctx.send("‚ùå Tu n‚Äôas pas encore li√© ton compte AniList. Utilise `!linkanilist <pseudo>`.")
        return

    episodes = get_upcoming_episodes(username)
    if not episodes:
        await ctx.send(f"üì≠ Aucun √©pisode √† venir trouv√© pour **{username}**.")
        return

    embed = discord.Embed(
        title=f"üìÖ Planning personnel ‚Äì {username}",
        description="Voici les prochains √©pisodes √† venir dans ta liste.",
        color=discord.Color.teal()
    )
    
    # Premi√®re boucle : ajout des √©pisodes
    for ep in sorted(episodes, key=lambda e: e["airingAt"])[:10]:
        dt = datetime.fromtimestamp(ep["airingAt"], tz=TIMEZONE)
        emoji = genre_emoji(ep["genres"])
        date_fr = format_datetime(dt, "EEEE d MMMM", locale='fr_FR').capitalize()
        heure = dt.strftime('%H:%M')
        value = f"üïí {date_fr} √† {heure}"

        embed.add_field(
            name=f"{emoji} {ep['title']} ‚Äì √âpisode {ep['episode']}",
            value=value,
            inline=False
        )

    # Deuxi√®me boucle : miniature sur le premier
    for i, ep in enumerate(sorted(episodes, key=lambda e: e["airingAt"])[:10]):
        if i == 0:
            embed.set_thumbnail(url=ep["image"])
            break  # plus besoin de continuer apr√®s le premier

    await ctx.send(embed=embed)

@bot.command(name="monchart")
async def monchart(ctx, username: str = None):
    links = load_links()
    if not username:
        username = links.get(str(ctx.author.id))
        if not username:
            await ctx.send("‚ùå Tu dois lier ton compte AniList avec `!linkanilist <pseudo>`.")
            return

    query = '''
    query ($name: String) {
      User(name: $name) {
        statistics {
          anime {
            genres {
              genre
              count
            }
          }
        }
      }
    }
    '''
    data = query_anilist(query, {"name": username})
    if not data:
        await ctx.send("‚ùå Impossible de r√©cup√©rer les donn√©es AniList.")
        return

    genre_stats = data["data"]["User"]["statistics"]["anime"]["genres"]
    top_genres = sorted(genre_stats, key=lambda g: g["count"], reverse=True)[:6]
    total = sum(g["count"] for g in top_genres)

    def emoji_genre(name):
        emojis = {
            "Action": "‚öîÔ∏è", "Fantasy": "üßô", "Romance": "üíñ", "Comedy": "üòÇ",
            "Drama": "üé≠", "Horror": "üëª", "Sci-Fi": "üöÄ", "Music": "üéµ",
            "Sports": "‚öΩ", "Slice of Life": "üçÉ", "Psychological": "üß†",
            "Adventure": "üåç", "Mecha": "ü§ñ", "Supernatural": "üîÆ",
            "Ecchi": "üò≥", "Mystery": "üïµÔ∏è"
        }
        return emojis.get(name, "üì∫")

    def bar(p):
        filled = int(p / 10)
        return "‚ñ∞" * filled + "‚ñ±" * (10 - filled)

    lines = [f"üìä Genres les plus regard√©s de **{username}** :\n"]
    for g in top_genres:
        percent = int((g["count"] / total) * 100)
        lines.append(f"{emoji_genre(g['genre'])} {g['genre']:<13} {bar(percent)}  {percent}%")

    await ctx.send("\n".join(lines))

@bot.command(name="uptime")
async def uptime(ctx):
    now = datetime.utcnow()
    uptime_duration = now - start_time

    hours, remainder = divmod(int(uptime_duration.total_seconds()), 3600)
    minutes, seconds = divmod(remainder, 60)

    desc = f"üïí **AnimeBot actif depuis :** {hours} heures, {minutes} minutes"
    embed = discord.Embed(title="Uptime du bot", description=desc, color=0x2ecc71)
    await ctx.send(embed=embed)

    
@bot.command(name="journalier")
async def journalier(ctx, mode: str = ""):
    uid = str(ctx.author.id)
    user_settings.setdefault(uid, {})
    if mode.lower() in ["off", "disable", "d√©sactiver"]:
        user_settings[uid]["daily_summary"] = False
        save_json(USER_SETTINGS_FILE, user_settings)
        await ctx.send("üì≠ R√©sum√© quotidien d√©sactiv√© pour toi.")
    elif mode.lower() in ["on", "enable", "activer"]:
        user_settings[uid]["daily_summary"] = True
        save_json(USER_SETTINGS_FILE, user_settings)
        await ctx.send("üì¨ Tu recevras d√©sormais un r√©sum√© **chaque matin en message priv√©**.")
    else:
        current = user_settings.get(uid, {}).get("daily_summary", False)
        emoji = "üì¨" if current else "üì≠"
        await ctx.send(f"{emoji} Le r√©sum√© quotidien est **{'activ√©' if current else 'd√©sactiv√©'}** pour toi.")

@bot.command(name="aujourdhui")
async def aujourdhui(ctx):
    today = datetime.now(TIMEZONE).date()
    episodes = get_upcoming_episodes(ANILIST_USERNAME)
    found = [(ep, datetime.fromtimestamp(ep["airingAt"], tz=pytz.utc).astimezone(TIMEZONE))
             for ep in episodes if datetime.fromtimestamp(ep["airingAt"], tz=pytz.utc).astimezone(TIMEZONE).date() == today]
    if not found:
        await ctx.send("Aucun √©pisode pr√©vu aujourd‚Äôhui.")
        return
    embed = discord.Embed(title="üìÖ √âpisodes du jour", color=discord.Color.green())
    for ep, dt in found:
        emoji = genre_emoji(ep["genres"])
        embed.add_field(name=f"{emoji} {ep['title']} ‚Äî √âp {ep['episode']}", value=dt.strftime("%H:%M"), inline=False)
    await ctx.send(embed=embed)

@bot.command(name="planning")
async def planning(ctx):
    episodes = get_upcoming_episodes(ANILIST_USERNAME)
    if not episodes:
        await ctx.send("Aucun planning disponible.")
        return

    weekdays = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche']
    planning = {day: [] for day in weekdays}

    for ep in episodes:
        day = datetime.fromtimestamp(ep['airingAt']).strftime('%A')
        fr_day = {
            'Monday': 'Lundi', 'Tuesday': 'Mardi', 'Wednesday': 'Mercredi',
            'Thursday': 'Jeudi', 'Friday': 'Vendredi', 'Saturday': 'Samedi', 'Sunday': 'Dimanche'
        }[day]
        dt = datetime.fromtimestamp(ep['airingAt']).strftime("%H:%M")
        planning[fr_day].append(f"‚Ä¢ {ep['title']} ‚Äî √âp. {ep['episode']} ({dt})")

    for day in weekdays:
        if planning[day]:
            embed = discord.Embed(title=f"üìÖ Planning du {day}", description="\n".join(planning[day]), color=0x1abc9c)
            await ctx.send(embed=embed)

@bot.command(name="animequiz")
async def anime_quiz(ctx, difficulty: str = "normal"):
    await ctx.send("üéÆ Pr√©paration du quiz...")

    difficulty = difficulty.lower()
    sort_option = "SCORE_DESC"
    if difficulty == "easy":
        sort_option = "POPULARITY_DESC"
    elif difficulty == "hard":
        sort_option = "TRENDING_DESC"

    anime = None
    for _ in range(10):
        page = random.randint(1, 500)
        query = f'''
        query {{
          Page(perPage: 1, page: {page}) {{
            media(type: ANIME, isAdult: false, sort: {sort_option}) {{
              id
              title {{ romaji english native }}
              coverImage {{ large }}
            }}
          }}
        }}
        '''
        data = query_anilist(query)
        try:
            anime = data["data"]["Page"]["media"][0]
            break
        except:
            continue

    if not anime:
        await ctx.send("‚ùå Aucun anime trouv√©.")
        return

    correct_titles = set()

    anime_id = str(anime.get("id"))
    if anime_id in title_cache:
        correct_titles = set(title_cache[anime_id])
    else:
        correct_titles = title_variants(anime["title"])  # fallback au cas o√π



    # üé¥ Embed visuel
    embed = discord.Embed(
        title="‚ùì Quel est cet anime ?",
        description="Tu as **20 secondes** pour deviner. Tape `jsp` si tu veux passer.",
        color=discord.Color.orange()
    )
    embed.set_image(url=anime["coverImage"]["large"])
    await ctx.send(embed=embed)

    def check(m):
        return (
            m.author == ctx.author and
            m.channel == ctx.channel
        )

    try:
        msg = await bot.wait_for("message", timeout=20.0, check=check)
        user_input = normalize(msg.content)

        if user_input == "jsp":
            await ctx.send(f"‚è≠Ô∏è Question pass√©e. La bonne r√©ponse √©tait **{anime['title']['romaji']}**.")
            return

        if user_input in correct_titles:
            await ctx.send(f"‚úÖ Bonne r√©ponse, **{ctx.author.display_name}** !")

            # üéØ Score + XP
            scores = load_scores()
            uid = str(ctx.author.id)
            scores[uid] = scores.get(uid, 0) + 1
            save_scores(scores)

            xp_amount = 10
            if difficulty == "easy":
                xp_amount = 5
            elif difficulty == "hard":
                xp_amount = 15
            add_xp(ctx.author.id, amount=xp_amount)

        else:
            await ctx.send(f"‚ùå Mauvaise r√©ponse. C‚Äô√©tait **{anime['title']['romaji']}**.")

    except asyncio.TimeoutError:
        await ctx.send(f"‚è∞ Temps √©coul√© ! La bonne r√©ponse √©tait **{anime['title']['romaji']}**.")

@bot.command(name="animequizmulti")
async def anime_quiz_multi(ctx, nb_questions: int = 5):
    if nb_questions < 1 or nb_questions > 20:
        await ctx.send("‚ùå Tu dois choisir un nombre entre 1 et 20.")
        return

    await ctx.send(f"üéÆ Lancement de **{nb_questions} questions** pour **{ctx.author.display_name}**...")

    difficulties = ["easy", "normal", "hard"]
    score = 0
    total_xp = 0

    for i in range(nb_questions):
        difficulty = random.choice(difficulties)
        sort_option = {
            "easy": "POPULARITY_DESC",
            "normal": "SCORE_DESC",
            "hard": "TRENDING_DESC"
        }.get(difficulty, "SCORE_DESC")

        anime = None
        for _ in range(10):
            page = random.randint(1, 500)
            query = f'''
            query {{
              Page(perPage: 1, page: {page}) {{
                media(type: ANIME, isAdult: false, sort: {sort_option}) {{
                  id
                  title {{ romaji english native }}
                  coverImage {{ large }}
                }}
              }}
            }}
            '''
            data = query_anilist(query)
            try:
                anime = data["data"]["Page"]["media"][0]
                break
            except:
                continue

        if not anime:
            await ctx.send("‚ùå Impossible de r√©cup√©rer un anime.")
            continue

        correct_titles = title_variants(anime["title"])
        image = anime["coverImage"]["large"]

        embed = discord.Embed(
            title=f"‚ùì Question {i+1}/{nb_questions} ‚Äî difficult√© `{difficulty}`",
            description="Tu as **20 secondes** pour deviner. Tape `jsp` pour passer.",
            color=discord.Color.orange()
        )
        embed.set_image(url=image)
        await ctx.send(embed=embed)

        def check(m):
            return m.author == ctx.author and m.channel == ctx.channel

        try:
            msg = await bot.wait_for("message", timeout=20.0, check=check)
            guess = normalize(msg.content)

            if guess == "jsp":
                await ctx.send(f"‚è≠Ô∏è Pass√©. C‚Äô√©tait **{anime['title']['romaji']}**.")
                continue

            if guess in correct_titles:
                await ctx.send(f"‚úÖ Bonne r√©ponse !")
                score += 1
                xp_gain = 5 if difficulty == "easy" else 10 if difficulty == "normal" else 15
                total_xp += xp_gain
            else:
                await ctx.send(f"‚ùå Faux ! C‚Äô√©tait **{anime['title']['romaji']}**.")

        except asyncio.TimeoutError:
            await ctx.send(f"‚è∞ Temps √©coul√© ! C‚Äô√©tait **{anime['title']['romaji']}**.")

        await asyncio.sleep(1.5)

    # Enregistrement du score global
    scores = load_scores()
    uid = str(ctx.author.id)

    # P√©nalit√© si moins de 50% de bonnes r√©ponses
    if score < (nb_questions // 2):
        penalty = 1
        scores[uid] = max(0, scores.get(uid, 0) - penalty)
        await ctx.send(f"‚ö†Ô∏è Tu as fait moins de 50% de bonnes r√©ponses, -{penalty} point retir√©.")
    else:
        scores[uid] = scores.get(uid, 0) + score

    save_scores(scores)
    add_xp(ctx.author.id, amount=total_xp)

    await ctx.send(f"üèÅ Fin du quiz ! Score final : **{score}/{nb_questions}** ‚Äì üéñÔ∏è XP gagn√© : **{total_xp}**")

@bot.command(name="duel")
async def duel(ctx, opponent: discord.Member):
    if opponent.bot:
        await ctx.send("ü§ñ Tu ne peux pas d√©fier un bot.")
        return
    if opponent == ctx.author:
        await ctx.send("üôÉ Tu ne peux pas te d√©fier toi-m√™me.")
        return

    await ctx.send(f"‚öîÔ∏è Duel entre **{ctx.author.display_name}** et **{opponent.display_name}** lanc√© !")

    players = [ctx.author, opponent]
    scores = {ctx.author.id: 0, opponent.id: 0}
    difficulties = ["easy", "normal", "hard"]

    for i in range(1, 4):
        await ctx.send(f"‚ùì Question {i}/3...")

        # üéØ Tirage al√©atoire d‚Äôun anime
        difficulty = random.choice(difficulties)
        sort_option = {
            "easy": "POPULARITY_DESC",
            "normal": "SCORE_DESC",
            "hard": "TRENDING_DESC"
        }[difficulty]

        anime = None
        for _ in range(10):
            page = random.randint(1, 500)
            query = f'''
            query {{
              Page(perPage: 1, page: {page}) {{
                media(type: ANIME, isAdult: false, sort: {sort_option}) {{
                  id
                  title {{ romaji english native }}
                  coverImage {{ large }}
                }}
              }}
            }}
            '''
            data = query_anilist(query)
            try:
                anime = data["data"]["Page"]["media"][0]
                break
            except:
                continue

        if not anime:
            await ctx.send("‚ùå Impossible de r√©cup√©rer un anime.")
            continue

        correct_titles = title_variants(anime["title"])
        embed = discord.Embed(
            title=f"üéÆ Duel ‚Äì Question {i}/3",
            description="**Tu as 15 secondes** pour deviner l‚Äôanime. Tape `jsp` pour passer.",
            color=discord.Color.red()
        )
        embed.set_image(url=anime["coverImage"]["large"])
        await ctx.send(embed=embed)

        def check(m):
            return (
                m.channel == ctx.channel and
                m.author in players
            )

        try:
            msg = await bot.wait_for("message", timeout=15.0, check=check)
            content = normalize(msg.content)

            if content == "jsp":
                await ctx.send(f"‚è≠Ô∏è Question pass√©e. C‚Äô√©tait **{anime['title']['romaji']}**.")
                continue

            if content in correct_titles:
                scores[msg.author.id] += 1
                await ctx.send(f"‚úÖ Bonne r√©ponse de **{msg.author.display_name}** !")
            else:
                await ctx.send(f"‚ùå Mauvaise r√©ponse. C‚Äô√©tait **{anime['title']['romaji']}**.")
        except asyncio.TimeoutError:
            await ctx.send(f"‚è∞ Temps √©coul√© ! C‚Äô√©tait **{anime['title']['romaji']}**.")

        await asyncio.sleep(1)

    # üßæ R√©sultat final
    s1 = scores[ctx.author.id]
    s2 = scores[opponent.id]
    if s1 == s2:
        result = f"ü§ù √âgalit√© parfaite : {s1} - {s2}"
    else:
        winner = ctx.author if s1 > s2 else opponent
        loser = opponent if winner == ctx.author else ctx.author
        result = f"üèÜ Victoire de **{winner.display_name}** ({s1} - {s2})"
        add_xp(winner.id, amount=20)

    await ctx.send(result)

@bot.command(name="suggest")
async def suggest(ctx, genre: str = None):
    query = '''
    query ($name: String) {
      MediaListCollection(userName: $name, type: ANIME, status: PLANNING) {
        lists {
          entries {
            media {
              title {
                romaji
              }
              genres
              coverImage {
                large
              }
              siteUrl
            }
          }
        }
      }
    }
    '''

    variables = {
        "name": ANILIST_USERNAME
    }

    response = requests.post('https://graphql.anilist.co', json={'query': query, 'variables': variables})
    data = response.json()

    # On r√©cup√®re tous les anim√©s dans la liste "√† regarder"
    entries = []
    try:
        for l in data["data"]["MediaListCollection"]["lists"]:
            entries.extend(l["entries"])
    except Exception:
        await ctx.send("‚ùå Impossible de r√©cup√©rer ta liste Anilist.")
        return

    # Filtrage par genre si demand√©
    if genre:
        genre = genre.capitalize()
        entries = [e for e in entries if genre in e["media"]["genres"]]

    if not entries:
        await ctx.send("‚ùå Aucun anim√© trouv√© dans ta liste correspondante.")
        return

    # S√©lection al√©atoire
    choice = random.choice(entries)
    media = choice["media"]

    embed = discord.Embed(
        title=f"üé≤ Suggestion : {media['title']['romaji']}",
        description=f"üìö [Voir sur AniList]({media['siteUrl']})",
        color=discord.Color.blurple()
    )
    embed.set_image(url=media["coverImage"]["large"])
    embed.set_footer(text=f"Genres : {', '.join(media['genres'])}")

    await ctx.send(embed=embed)

@bot.command(name="planningvisuel")
async def planningvisuel(ctx):
    import calendar
    from PIL import Image, ImageDraw, ImageFont
    from datetime import datetime, timedelta
    import pytz

    # üìÖ R√©cup√©ration des √©pisodes √† venir
    episodes = get_upcoming_episodes(ANILIST_USERNAME)
    TIMEZONE = pytz.timezone("Europe/Paris")
    jours = list(calendar.day_name)
    planning = {day: [] for day in jours}

    for ep in episodes:
        dt = datetime.fromtimestamp(ep["airingAt"], tz=pytz.utc).astimezone(TIMEZONE)
        day = dt.strftime("%A")
        planning[day].append({
            "title": ep["title"],
            "episode": ep["episode"],
            "time": dt.strftime("%H:%M")
        })

    # üñºÔ∏è Cr√©ation de l‚Äôimage
    width, height = 800, 600
    card = Image.new("RGB", (width, height), (30, 30, 40))
    draw = ImageDraw.Draw(card)

    # Polices
    font_title = ImageFont.truetype("fonts/DejaVuSans-Bold.ttf", 28)
    font_day = ImageFont.truetype("fonts/DejaVuSans-Bold.ttf", 22)
    font_text = ImageFont.truetype("fonts/DejaVuSans.ttf", 18)

    # En-t√™te
    draw.text((20, 20), "Planning des √©pisodes ‚Äì Semaine", font=font_title, fill="white")

    # Placement
    x, y = 40, 70
    for day in jours:
        draw.text((x, y), f"> {day}", font=font_day, fill="#ffdd77")
        y += 30
        for ep in planning[day][:4]:  # max 4 par jour
            draw.text((x + 10, y), f"‚Ä¢ {ep['title']} ‚Äì Ep {ep['episode']} ({ep['time']})", font=font_text, fill="white")
            y += 24
        y += 30

    # Sauvegarde et envoi
    path = f"/tmp/planning_week.png"
    card.save(path)

    with open(path, "rb") as f:
        await ctx.send(file=discord.File(f, filename="planning.png"))

    
@bot.command(name="help")
async def help_command(ctx):
    import asyncio

    pages = [
        {
            "title": "üìÖ √âpisodes & Planning + üîî Notifications",
            "fields": [
                ("`!next` / `!monnext`", "Prochain √©pisode dans ta liste ou celle d'un membre."),
                ("`!planning` / `!monplanning`", "Planning complet de la semaine."),
                ("`!prochains <genre>`", "√âpisodes √† venir filtr√©s par genre."),
                ("`!planningvisuel`", "Affiche une version visuelle du planning."),
                ("`!reminder`", "Active ou d√©sactive les rappels quotidiens."),
                ("`!setalert HH:MM`", "D√©finit l‚Äôheure de ton r√©sum√© automatique."),
                ("`!anitracker <titre>`", "Suis un anime et re√ßois une alerte DM."),
                ("`!anitracker list` / `remove <titre>`", "Voir ou retirer tes suivis.")
            ]
        },
        {
            "title": "üéÆ Quiz & Niveaux + üèÜ Challenges",
            "fields": [
                ("`!animequiz`", "Devine un anime en solo."),
                ("`!animequizmulti <N>`", "Encha√Æne N questions √† difficult√© al√©atoire."),
                ("`!duel @ami`", "Affronte un ami en duel de 3 questions."),
                ("`!animebattle`", "Petit mode quiz solo (al√©atoire rapide)."),
                ("`!quiztop`", "Classement des meilleurs au quiz."),
                ("`!myrank`", "Affiche ton niveau, XP et ton titre."),
                ("`!anichallenge`", "Re√ßois un anime √† regarder et note-le."),
                ("`!challenge complete <note>`", "Indique que tu as termin√© ton d√©fi."),
                ("`!weekly`", "Un nouveau d√©fi chaque semaine."),
                ("`!weekly complete`", "Valide ton d√©fi hebdomadaire.")
            ]
        },
        {
            "title": "üìä Stats & Profils + üéØ Comparaison",
            "fields": [
                ("`!linkanilist <pseudo>`", "Lier ton compte AniList au bot."),
                ("`!unlink`", "Supprimer le lien avec ton compte AniList."),
                ("`!mystats` / `!stats <pseudo>`", "Carte de profil stylis√©e (toi ou un autre)."),
                ("`!mychart` / `!monchart`", "R√©partition de tes genres pr√©f√©r√©s."),
                ("`!duelstats @ami`", "Compare ton profil AniList √† un ami."),
                ("`!classementgenre <genre>`", "Classement des passionn√©s par genre.")
            ]
        },
        {
            "title": "üõ†Ô∏è Utilitaires & Recherche",
            "fields": [
                ("`!uptime`", "Depuis combien de temps le bot est actif."),
                ("`!setchannel`", "D√©finit ce salon comme canal des notifications."),
                ("`!topanime`", "Top des anim√©s les mieux not√©s."),
                ("`!seasonal`", "Top des anim√©s en cours cette saison."),
                ("`!search <titre>`", "Recherche un anime via AniList."),
                ("`!help`", "Affiche cette aide interactive.")
            ]
        }
    ]

    def make_embed(index):
        page = pages[index]
        embed = discord.Embed(
            title=page["title"],
            color=discord.Color.purple()
        )
        for name, desc in page["fields"]:
            embed.add_field(name=name, value=desc, inline=False)
        embed.set_footer(text=f"Page {index+1}/{len(pages)} ‚Äî AnimeBot")
        return embed

    current = 0
    message = await ctx.send(embed=make_embed(current))
    await message.add_reaction("‚óÄÔ∏è")
    await message.add_reaction("‚ñ∂Ô∏è")

    def check(reaction, user):
        return (
            user == ctx.author and str(reaction.emoji) in ["‚óÄÔ∏è", "‚ñ∂Ô∏è"]
            and reaction.message.id == message.id
        )

    while True:
        try:
            reaction, user = await bot.wait_for("reaction_add", timeout=120.0, check=check)
            if str(reaction.emoji) == "‚ñ∂Ô∏è":
                current = (current + 1) % len(pages)
            elif str(reaction.emoji) == "‚óÄÔ∏è":
                current = (current - 1) % len(pages)
            await message.edit(embed=make_embed(current))
            await message.remove_reaction(reaction, user)
        except asyncio.TimeoutError:
            break

@bot.command(name="resetquiz")
@commands.is_owner()
async def reset_quiz(ctx):
    scores = load_scores()
    if scores:
        top_uid = max(scores.items(), key=lambda x: x[1])[0]
        winner_data = {
            "uid": top_uid,
            "timestamp": datetime.now(tz=TIMEZONE).isoformat()
        }
        save_json("last_quiz_winner.json", winner_data)
    save_scores({})
    await ctx.send("‚úÖ Classement `animequiz` r√©initialis√©.")

@bot.command(name="setalert")
async def setalert(ctx, time_str: str):
    try:
        hour, minute = map(int, time_str.split(":"))
        if not (0 <= hour < 24 and 0 <= minute < 60):
            raise ValueError

        # Tu stockes l'heure dans ton syst√®me de pr√©f√©rences
        user_id = str(ctx.author.id)
        preferences.setdefault(user_id, {})
        preferences[user_id]["alert_time"] = f"{hour:02d}:{minute:02d}"
        save_json(PREFERENCES_FILE, preferences)

        await ctx.send(f"‚úÖ Alerte quotidienne d√©finie √† **{hour:02d}:{minute:02d}**.")
    except ValueError:
        await ctx.send("‚ùå Format invalide. Utilise `!setalert HH:MM` (ex: `!setalert 08:30`).")

    
@bot.command(name="reminder")
async def reminder(ctx, mode: str = ""):
    uid = str(ctx.author.id)
    if mode.lower() in ["off", "disable", "d√©sactiver"]:
        user_settings.setdefault(uid, {})
        user_settings[uid]["reminder"] = False
        save_json(USER_SETTINGS_FILE, user_settings)
        await ctx.send("üîï Rappels d√©sactiv√©s pour toi.")
    elif mode.lower() in ["on", "enable", "activer"]:
        user_settings.setdefault(uid, {})
        user_settings[uid]["reminder"] = True
        save_json(USER_SETTINGS_FILE, user_settings)
        await ctx.send("üîî Rappels activ√©s pour toi.")
    else:
        current = user_settings.get(uid, {}).get("reminder", True)
        emoji = "üîî" if current else "üîï"
        await ctx.send(f"{emoji} Les rappels sont actuellement **{'activ√©s' if current else 'd√©sactiv√©s'}** pour toi.")

@bot.command(name="setchannel")
async def setchannel(ctx):
    if ctx.author.id != OWNER_ID:
        await ctx.send("üö´ Tu n‚Äôas pas la permission d‚Äôutiliser cette commande.")
        return
    config = get_config()
    config["channel_id"] = ctx.channel.id
    save_config(config)
    await ctx.send(f"‚úÖ Ce canal a √©t√© d√©fini pour les notifications.")

@tasks.loop(minutes=1)
async def send_daily_summaries():
    now = datetime.now(TIMEZONE)
    current_time = now.strftime("%H:%M")
    current_day = now.strftime("%A")

    for user_id, prefs in preferences.items():
        if not prefs.get("reminder", True):
            continue  # L'utilisateur a d√©sactiv√© les reminders

        alert_time = prefs.get("alert_time", "08:00")
        if current_time != alert_time:
            continue  # Ce n‚Äôest pas encore l‚Äôheure

        episodes = get_upcoming_episodes(ANILIST_USERNAME)
        episodes_today = [ep for ep in episodes if
                          datetime.fromtimestamp(ep["airingAt"], tz=pytz.utc).astimezone(TIMEZONE).strftime("%A") == current_day]

        if not episodes_today:
            continue

        try:
            user = await bot.fetch_user(int(user_id))
            embed = discord.Embed(
                title="üì∫ R√©sum√© du jour",
                description=f"Voici les √©pisodes √† regarder ce **{jours_fr.get(current_day, current_day)}** !",
                color=discord.Color.green()
            )
            for ep in sorted(episodes_today, key=lambda e: e['airingAt']):
                dt = datetime.fromtimestamp(ep["airingAt"], tz=pytz.utc).astimezone(TIMEZONE)
                emoji = genre_emoji(ep["genres"])
                embed.add_field(
                    name=f"{emoji} {ep['title']} ‚Äî √âpisode {ep['episode']}",
                    value=f"üïí {dt.strftime('%H:%M')}",
                    inline=False
                )

            await user.send(embed=embed)
        except Exception as e:
            print(f"[Erreur DM r√©sum√© pour {user_id}] {e}")

@tasks.loop(hours=1)
async def reset_monthly_scores():
    # Ton code de remise √† z√©ro
    print("üîÅ Reset des scores mensuels ex√©cut√©")
    
@tasks.loop(hours=24)
async def monthly_reset():
    now = datetime.now(tz=TIMEZONE)
    if now.day == 1:
        scores = load_scores()
        if scores:
            top_uid = max(scores.items(), key=lambda x: x[1])[0]
            winner_data = {
                "uid": top_uid,
                "timestamp": now.isoformat()
            }
            save_json("last_quiz_winner.json", winner_data)
            save_scores({})  # reset scores
            print("üîÅ Quiz mensuel r√©initialis√©.")

            config = get_config()
            cid = config.get("channel_id")
            if cid:
                channel = bot.get_channel(cid)
                if channel:
                    try:
                        user = await bot.fetch_user(int(top_uid))
                        await channel.send(
                            f"üîÅ **D√©but du mois !** Le classement `!quiztop` a √©t√© remis √† z√©ro !\n"
                            f"üèÜ Bravo √† **{user.display_name}** pour sa victoire le mois dernier ! Bonne chance √† tous üçÄ"
                        )
                    except:
                        pass

@tasks.loop(minutes=5)
async def check_new_episodes():
    await bot.wait_until_ready()
    config = get_config()
    cid = config.get("channel_id")
    if cid is None:
        return
    channel = bot.get_channel(cid)
    if not channel:
        return

    episodes = get_upcoming_episodes(ANILIST_USERNAME)
    now = int(datetime.now(tz=pytz.utc).timestamp())

    for ep in episodes:
        uid = f"{ep['id']}-{ep['episode']}"
        if uid in notified:
            continue
        if now >= ep["airingAt"] - 900:
            dt = datetime.fromtimestamp(ep["airingAt"], tz=pytz.utc).astimezone(TIMEZONE)
            embed = build_embed(ep, dt)
            await channel.send("üîî Rappel d'√©pisode imminent :", embed=embed)
            notified.add(uid)
            save_json(NOTIFIED_FILE, list(notified))

            # ‚úÖ Envoi aux abonn√©s
            tracker_data = load_tracker()
            for uid, titles in tracker_data.items():
                if normalize(ep["title"]) in [normalize(t) for t in titles]:
                    try:
                        user = await bot.fetch_user(int(uid))
                        await user.send(
                            f"üîî Nouvel √©pisode dispo : **{ep['title']} ‚Äì √âpisode {ep['episode']}**",
                            embed=embed
                        )
                    except:
                        pass  # utilisateur bloqu√©, DM d√©sactiv√©s, etc.

            
@bot.event
async def on_ready():
    now = datetime.now().strftime("%d/%m/%Y √† %H:%M:%S")
    print(f"[BOOT üü¢] {bot.user.name} pr√™t ‚Äî ID: {bot.user.id} √† {now}")

    # Mise √† jour du cache de titres (dans un thread s√©par√© si n√©cessaire)
    loop = asyncio.get_running_loop()
    loop.run_in_executor(None, update_title_cache)

    # R√©cup√©ration du bon channel depuis la config
    config = get_config()
    channel_id = config.get("channel_id")
    if channel_id:
        channel = bot.get_channel(channel_id)
        if channel:
            try:
                await channel.send("ü§ñ AnimeBot a d√©marr√© et est pr√™t √† traquer les sorties !")
            except:
                pass

    # ‚úÖ T√¢che 1 : r√©sum√© quotidien
    if not send_daily_summaries.is_running():
        send_daily_summaries.start()

    # ‚úÖ T√¢che 2 : alertes √©pisodes
    if not check_new_episodes.is_running():
        check_new_episodes.start()

    if not reset_monthly_scores.is_running():
        reset_monthly_scores.start()

    if not monthly_reset.is_running():
        monthly_reset.start()


# Lancer le bot
bot.run(DISCORD_TOKEN)

